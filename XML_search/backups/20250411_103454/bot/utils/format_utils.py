from typing import List, Dict, Any, Optional
from transliterate import translit
import logging
from XML_search.enhanced.log_manager import LogManager
from XML_search.enhanced.metrics import MetricsCollector

logger = LogManager().get_logger(__name__)
metrics = MetricsCollector()

def transliterate_text(text: str, direction: str = 'ru') -> str:
    """
    –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ ('ru' - –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É, 'en' - –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
        
    Returns:
        –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    try:
        if direction == 'ru':  # –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ -> –ª–∞—Ç–∏–Ω–∏—Ü–∞
            return translit(text, 'ru', reversed=True)
        else:  # –ª–∞—Ç–∏–Ω–∏—Ü–∞ -> –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
            return translit(text, 'ru')
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏: {e}")
        return text

def format_search_instructions() -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ø–æ–∏—Å–∫—É
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    """
    return (
        "üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º:\n\n"
        "1. –ü–æ–∏—Å–∫ –ø–æ SRID:\n"
        "   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç\n"
        "   - –ü—Ä–∏–º–µ—Ä: 100000\n\n"
        "2. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:\n"
        "   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è\n"
        "   - –ü—Ä–∏–º–µ—Ä: MSK01z1\n\n"
        "3. –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n"
        "   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è\n"
        "   - –ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, Moskovskaya\n\n"
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:\n"
        "- –°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è\n"
        "- –ó–∞—Ç–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
    )

def format_coord_instructions() -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –≤–≤–æ–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    """
    return (
        "üìç –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'latitude;longitude' –∏–ª–∏ 'latitude$longitude' –∏–ª–∏ 'latitude%longitude'\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:\n"
        "1. –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –≥—Ä–∞–¥—É—Å—ã: 55.7558;37.6173 –∏–ª–∏ 55.7558$37.6173 –∏–ª–∏ 55.7558%37.6173\n"
        "2. –ì—Ä–∞–¥—É—Å—ã –∏ –º–∏–Ω—É—Ç—ã: 55 45.348;37 37.038 –∏–ª–∏ 55 45.348$37 37.038 –∏–ª–∏ 55 45.348%37 37.038\n"
        "3. –ì—Ä–∞–¥—É—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã: 55 45 20.88;37 37 2.28 –∏–ª–∏ 55 45 20.88$37 37 2.28 –∏–ª–∏ 55 45 20.88%37 37 2.28\n"
        "4. –° –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏: 55¬∞45'20.88\";37¬∞37'2.28\" –∏–ª–∏ 55¬∞45'20.88\"$37¬∞37'2.28\" –∏–ª–∏ 55¬∞45'20.88\"%37¬∞37'2.28\"\n\n"
        "–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —à–∏—Ä–æ—Ç–æ–π –∏ –¥–æ–ª–≥–æ—Ç–æ–π - —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;) –∏–ª–∏ –∑–Ω–∞–∫ –¥–æ–ª–ª–∞—Ä–∞ ($) –∏–ª–∏ –∑–Ω–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (%)"
    )

def format_search_result(result: Dict[str, Any]) -> Dict[str, str]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
    
    Args:
        result: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–æ–∏—Å–∫–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    text = f"üîπ *SRID:* `{result['srid']}`\n"
    text += f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* `{result['srtext']}`"
    
    if result.get('info'):
        text += f"\n‚ÑπÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* `{result['info']}`"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
    if str(result['srid']).startswith('326'):
        p_value = "EPSG"
    elif result.get('reliability') is None:
        p_value = "–£—Ç–æ—á–Ω–∏—Ç—å —É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    else:
        p_value = result['reliability']
    
    text += (
        f"\n‚úÖ *–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å:* `{p_value}`\n"
        f"üì§ *–≠–∫—Å–ø–æ—Ä—Ç:* `xml_Civil3D, prj_GMv20, prj_GMv25`"
    )
    
    return {
        'text': text,
        'parse_mode': 'Markdown'
    }

def format_coord_result(result: Dict[str, Any]) -> Dict[str, str]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    
    Args:
        result: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–æ–∏—Å–∫–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    text = f"üîπ *SRID:* `{result['srid']}`\n"
    text += f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* `{result['name']}`"
    
    if result.get('info'):
        text += f"\n‚ÑπÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* `{result['info']}`"
    
    if result.get('x') is not None and result.get('y') is not None:
        text += f"\nüìç *–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:* `E: {round(result['x'], 3)}, N: {round(result['y'], 3)}`"
    else:
        text += f"\nüìç *–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:* `E: -, N: -`"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
    if str(result['srid']).startswith('326'):
        p_value = "EPSG"
    elif result.get('reliability') is None:
        p_value = "–£—Ç–æ—á–Ω–∏—Ç—å —É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    else:
        p_value = result['reliability']
    
    text += (
        f"\n‚úÖ *–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å:* `{p_value}`\n"
        f"üì§ *–≠–∫—Å–ø–æ—Ä—Ç:* `xml_Civil3D, prj_GMv20, prj_GMv25`"
    )
    
    return {
        'text': text,
        'parse_mode': 'Markdown'
    } 