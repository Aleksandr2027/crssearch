"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import time
from telegram import Update
from telegram.ext import ContextTypes
from ..states.conversation_states import States
from .base_handler import BaseHandler
from ..keyboards.main_keyboard import MainKeyboard
from XML_search.enhanced.db_manager import DatabaseManager
from XML_search.enhanced.metrics import MetricsCollector
from XML_search.search_handler import SearchHandler as CrsSearchHandler

class SearchHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, db_manager: DatabaseManager, metrics: MetricsCollector):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∏—Å–∫–∞
        
        Args:
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            metrics: –°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
        """
        super().__init__("search_handler")
        self.db_manager = db_manager
        self.metrics = metrics
        self.main_keyboard = MainKeyboard()
        self.search_processor = CrsSearchHandler()
        
    async def process(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        start_time = time.time()
        
        try:
            if update.message.text in [self.main_keyboard.BUTTON_MENU]:
                if update.message.text == self.main_keyboard.BUTTON_MENU:
                    keyboard = self.main_keyboard.get_keyboard()
                    await update.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
                        reply_markup=keyboard
                    )
                    return States.MAIN_MENU
                return States.WAITING_SEARCH
                
            if update.message.text.startswith('üîπ SRID:'):
                return States.WAITING_SEARCH
                
            processing_message = await update.message.reply_text(
                "üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...",
                parse_mode='Markdown'
            )
            
            try:
                search_term = update.message.text.strip()
                with self.metrics.timing('search_duration'):
                    results = self.search_processor.search_with_transliteration(search_term)
                    formatted_results = self.search_processor.format_results(results)
                    
                if isinstance(formatted_results, str):
                    # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
                    await processing_message.edit_text(
                        formatted_results,
                        parse_mode='Markdown'
                    )
                else:
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
                    await processing_message.delete()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    for result in formatted_results:
                        await update.message.reply_text(
                            result['text'],
                            parse_mode='Markdown',
                            reply_markup=result['keyboard']
                        )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                self.metrics.increment('search_success')
                self.metrics.gauge('search_results', len(results))
                
            except Exception as e:
                error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"
                self.logger.error(error_message)
                self.metrics.increment('search_errors')
                await processing_message.edit_text(error_message)
                
            return States.WAITING_SEARCH
            
        except Exception as e:
            await self._handle_error(update, context, e)
            return States.ERROR
            
        finally:
            self._log_metrics('process', time.time() - start_time) 