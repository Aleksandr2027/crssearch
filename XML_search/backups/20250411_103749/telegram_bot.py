import logging
import signal
import asyncio
from telegram import Update, InlineQueryResultArticle, InputTextMessageContent, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, InlineQueryHandler, CallbackQueryHandler
from telegram.request import HTTPXRequest
from XML_search.config import TelegramConfig, LogConfig
import httpx
from transliterate import translit
import re
import psycopg2
import os
from XML_search.search_handler import SearchHandler
import telegram
from XML_search.enhanced.log_manager import LogManager
from XML_search.enhanced.metrics import MetricsCollector
from XML_search.enhanced.config_enhanced import EnhancedConfig
from XML_search.enhanced.exceptions import DatabaseError, QueryError
from contextlib import contextmanager
import win32api
import win32con
from pathlib import Path
from XML_search.enhanced.export.exporters.civil3d import Civil3DExporter
from XML_search.enhanced.export.exporters.gmv20 import GMv20Exporter
from XML_search.enhanced.export.exporters.gmv25 import GMv25Exporter
from XML_search.enhanced.export.export_manager import ExportManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
log_manager = LogManager()
logger = log_manager.get_logger(__name__)
metrics = MetricsCollector()
enhanced_config = EnhancedConfig.load_from_file('config/enhanced_config.json')

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ httpx
logging.getLogger('httpx').setLevel(logging.WARNING)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∏—Å–∫–∞
search_processor = SearchHandler()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AUTH, MAIN_MENU, WAITING_COORDINATES, WAITING_SEARCH = range(4)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authorized_users = set()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
BUTTON_COORD_SEARCH = '–ü–æ–∏—Å–∫ –°–ö –ø–æ Lat/Lon'
BUTTON_DESC_SEARCH = '–ü–æ–∏—Å–∫ –°–ö –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é'
BUTTON_MENU = 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
is_shutting_down = False
application = None

def transliterate_text(text: str, direction: str = 'ru') -> str:
    """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π"""
    try:
        if direction == 'ru':  # –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ -> –ª–∞—Ç–∏–Ω–∏—Ü–∞
            return translit(text, 'ru', reversed=True)
        else:  # –ª–∞—Ç–∏–Ω–∏—Ü–∞ -> –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
            return translit(text, 'ru')
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏: {e}")
        return text

async def check_access(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    if user_id in authorized_users:
        return True
    
    await update.message.reply_text(
        "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
    )
    return False

async def auth_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:"
    )
    return AUTH

async def auth_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    user_id = update.effective_user.id
    if update.message.text == TelegramConfig.ACCESS_PASSWORD:
        authorized_users.add(user_id)
        metrics.increment('auth_success')
        return await show_main_menu(update, context)
    else:
        metrics.increment('auth_failed')
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return AUTH

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."
    )
    return ConversationHandler.END

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    metrics.increment('start_command')
    await update.message.reply_text(
        "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:",
        reply_markup=ReplyKeyboardRemove()
    )
    return AUTH

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    metrics.increment('main_menu_show')
    keyboard = [
        [KeyboardButton(BUTTON_COORD_SEARCH)],
        [KeyboardButton(BUTTON_DESC_SEARCH)]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=reply_markup
    )
    return MAIN_MENU

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é"""
    if not update.message or not update.message.text:
        return MAIN_MENU

    choice = update.message.text
    
    if choice == BUTTON_COORD_SEARCH:
        metrics.increment('coord_search_selected')
        keyboard = [[KeyboardButton(BUTTON_MENU)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üìç –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'latitude;longitude' –∏–ª–∏ 'latitude$longitude' –∏–ª–∏ 'latitude%longitude'\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:\n"
            "1. –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –≥—Ä–∞–¥—É—Å—ã: 55.7558;37.6173 –∏–ª–∏ 55.7558$37.6173 –∏–ª–∏ 55.7558%37.6173\n"
            "2. –ì—Ä–∞–¥—É—Å—ã –∏ –º–∏–Ω—É—Ç—ã: 55 45.348;37 37.038 –∏–ª–∏ 55 45.348$37 37.038 –∏–ª–∏ 55 45.348%37 37.038\n"
            "3. –ì—Ä–∞–¥—É—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã: 55 45 20.88;37 37 2.28 –∏–ª–∏ 55 45 20.88$37 37 2.28 –∏–ª–∏ 55 45 20.88%37 37 2.28\n"
            "4. –° –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏: 55¬∞45'20.88\";37¬∞37'2.28\" –∏–ª–∏ 55¬∞45'20.88\"$37¬∞37'2.28\" –∏–ª–∏ 55¬∞45'20.88\"%37¬∞37'2.28\"\n\n"
            "–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —à–∏—Ä–æ—Ç–æ–π –∏ –¥–æ–ª–≥–æ—Ç–æ–π - —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;) –∏–ª–∏ –∑–Ω–∞–∫ –¥–æ–ª–ª–∞—Ä–∞ ($) –∏–ª–∏ –∑–Ω–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (%)",
            reply_markup=reply_markup
        )
        return WAITING_COORDINATES
    
    elif choice == BUTTON_DESC_SEARCH:
        metrics.increment('desc_search_selected')
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [[KeyboardButton(BUTTON_MENU)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        await update.message.reply_text(
            "üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º:\n\n"
            "1. –ü–æ–∏—Å–∫ –ø–æ SRID:\n"
            "   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç\n"
            "   - –ü—Ä–∏–º–µ—Ä: 100000\n\n"
            "2. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:\n"
            "   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è\n"
            "   - –ü—Ä–∏–º–µ—Ä: MSK01z1\n\n"
            "3. –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n"
            "   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è\n"
            "   - –ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, Moskovskaya\n\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:\n"
            "- –°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è\n"
            "- –ó–∞—Ç–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è",
            reply_markup=reply_markup
        )
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        inline_keyboard = [[
            InlineKeyboardButton(
                "üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ",
                switch_inline_query_current_chat=""
            )
        ]]
        inline_markup = InlineKeyboardMarkup(inline_keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–æ–π
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:",
            reply_markup=inline_markup
        )
        
        return WAITING_SEARCH
    
    elif choice == BUTTON_MENU:
        return await show_main_menu(update, context)
    
    return MAIN_MENU

async def process_coordinates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    if update.message.text == BUTTON_MENU:
        return await show_main_menu(update, context)
        
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await update.message.reply_text(
            "üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏..."
        )

        # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        latitude, longitude = parse_coordinates(update.message.text)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º search_processor –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        results = []
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ç–æ—á–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            with search_processor.crs_bot.db_manager.safe_transaction() as conn:
                with conn.cursor() as cursor:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ç–æ—á–∫–∏
                    query = """
                        SELECT cg.srid, cg.name, cg.deg, cg.info, cg.p
                        FROM public.custom_geom cg
                        WHERE ST_Contains(cg.geom, ST_SetSRID(ST_MakePoint(%s, %s), 4326));
                    """
                    cursor.execute(query, (longitude, latitude))
                    base_results = cursor.fetchall()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transform_query = """
                SELECT ST_X(transformed), ST_Y(transformed)
                FROM (SELECT ST_Transform(ST_SetSRID(ST_MakePoint(%s, %s), 4326), %s) AS transformed) AS subquery;
            """
            
            for row in base_results:
                srid = row[0]
                name = row[1]
                deg = row[2]
                info = row[3]
                p = row[4]
                
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    with search_processor.crs_bot.db_manager.safe_transaction() as trans_conn:
                        with trans_conn.cursor() as trans_cursor:
                            trans_cursor.execute(transform_query, (longitude, latitude, srid))
                            coords = trans_cursor.fetchone()
                        if coords and None not in coords:
                            results.append((srid, name, deg, info, p, coords[0], coords[1]))
                        else:
                            results.append((srid, name, deg, info, p, None, None))
                except Exception as e:
                    # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                    # –¥–ª—è —Å–∏—Å—Ç–µ–º —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–æ–µ–∫—Ü–∏–∏
                    results.append((srid, name, deg, info, p, None, None))
                    metrics.increment('coord_transform_errors')
                
            # –î–æ–±–∞–≤–ª—è–µ–º UTM –∑–æ–Ω—É –¥–ª—è —Å–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—à–∞—Ä–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if latitude >= 0:
                utm_zone = int((longitude + 180) // 6) + 1
                if 1 <= utm_zone <= 60:
                    srid_utm = 32600 + utm_zone
                    try:
                        with search_processor.crs_bot.db_manager.safe_transaction() as utm_conn:
                            with utm_conn.cursor() as utm_cursor:
                                utm_cursor.execute(transform_query, (longitude, latitude, srid_utm))
                                utm_coords = utm_cursor.fetchone()
                                if utm_coords and None not in utm_coords:
                                    results.append((
                                        srid_utm,
                                        f"UTM zone {utm_zone}N",
                                        6,
                                        "WGS84",
                                        "EPSG",
                                        utm_coords[0],
                                        utm_coords[1]
                                    ))
                                else:
                                    results.append((
                                        srid_utm,
                                        f"UTM zone {utm_zone}N",
                                        6,
                                        "WGS84",
                                        "EPSG",
                                        None,
                                        None
                                    ))
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ UTM –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
                        metrics.increment('utm_transform_errors')
                        results.append((
                            srid_utm,
                            f"UTM zone {utm_zone}N",
                            6,
                            "WGS84",
                            "EPSG",
                            None,
                            None
                        ))
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
            metrics.increment('coord_search_errors')
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."
            )
            return WAITING_COORDINATES

        if not results:
            await processing_message.edit_text(
                "‚ùå –î–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."
            )
            return WAITING_COORDINATES

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ SRID
        srid_groups = {}
        for result in results:
            srid = result[0]
            if srid not in srid_groups:
                srid_groups[srid] = []
            srid_groups[srid].append(result)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_results = []
        for srid, group in srid_groups.items():
            result = group[0]
            
            if str(srid).startswith('326'):
                p_value = "EPSG"
            else:
                p_values = set(r[4] for r in group if r[4] is not None)
                if len(p_values) == 1:
                    p_value = next(iter(p_values))
                else:
                    p_value = "–£—Ç–æ—á–Ω–∏—Ç—å —É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

            result_text = (
                f"üîπ *SRID:* `{result[0]}`\n"
                f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* `{result[1]}`"
            )
            if result[3]:
                result_text += f"\n‚ÑπÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* `{result[3]}`"
            
            if result[5] is not None and result[6] is not None:
                result_text += f"\nüìç *–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:* `E: {round(result[5], 3)}, N: {round(result[6], 3)}`"
            else:
                result_text += f"\nüìç *–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:* `E: -, N: -`"
                
            result_text += (
                f"\n‚úÖ *–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å:* `{p_value}`\n"
                f"üì§ *–≠–∫—Å–ø–æ—Ä—Ç:* `xml_Civil3D, prj_GMv20, prj_GMv25`"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
            keyboard = [
                [
                    InlineKeyboardButton(
                        "xml_Civil3D",
                        callback_data=f"export_xml:{result[0]}"
                    ),
                    InlineKeyboardButton(
                        "prj_GMv20",
                        callback_data=f"export_gmv20:{result[0]}"
                    ),
                    InlineKeyboardButton(
                        "prj_GMv25",
                        callback_data=f"export_gmv25:{result[0]}"
                    )
                ]
            ]
            
            formatted_results.append({
                'text': result_text,
                'keyboard': InlineKeyboardMarkup(keyboard)
            })

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        await processing_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for result in formatted_results:
            await update.message.reply_text(
                result['text'],
                parse_mode='Markdown',
                reply_markup=result['keyboard']
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
        keyboard = [[KeyboardButton(BUTTON_MENU)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics.increment('coord_search_success')
        metrics.gauge('coord_search_results', len(results))

    except ValueError as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        metrics.increment('coord_search_errors')
        return WAITING_COORDINATES
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        metrics.increment('coord_search_errors')
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return WAITING_COORDINATES

    return WAITING_COORDINATES

async def search_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    if update.message.text in [BUTTON_MENU]:
        if update.message.text == BUTTON_MENU:
            return await show_main_menu(update, context)
        return WAITING_SEARCH
        
    if not await check_access(update):
        return ConversationHandler.END

    await process_search(update, context)
    return WAITING_SEARCH

async def process_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if not await check_access(update):
        return

    if update.message.text.startswith('üîπ SRID:'):
        return

    processing_message = await update.message.reply_text(
        "üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...",
        parse_mode='Markdown'
    )

    try:
        search_term = update.message.text.strip()
        with metrics.timing('search_duration'):
            results = search_processor.search_with_transliteration(search_term)
            formatted_results = search_processor.format_results(results)
            
        if isinstance(formatted_results, str):
            # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
            await processing_message.edit_text(
                formatted_results,
                parse_mode='Markdown'
            )
        else:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
            await processing_message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
            for result in formatted_results:
                await update.message.reply_text(
                    result['text'],
                    parse_mode='Markdown',
                    reply_markup=result['keyboard']
                )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics.increment('search_success')
        metrics.gauge('search_results', len(results))
        
    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"
        logger.error(error_message)
        metrics.increment('search_errors')
        await processing_message.edit_text(error_message)

async def inline_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.inline_query.query.strip()
    if not query:
        return

    try:
        with metrics.timing('inline_search_duration'):
            results = search_processor.search_with_transliteration(query)[:20]
            formatted_results = search_processor.format_inline_results(results, limit=20)
        
        inline_results = [
            InlineQueryResultArticle(
                id=result['id'],
                title=result['title'],
                description=result['description'],
                input_message_content=InputTextMessageContent(
                    result['message_text'],
                    parse_mode='Markdown'
                ),
                reply_markup=result['keyboard']
            )
            for result in formatted_results
        ]
        
        await update.inline_query.answer(
            inline_results,
            cache_time=1,
            is_personal=True
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics.increment('inline_search_success')
        metrics.gauge('inline_search_results', len(results))
        
    except telegram.error.BadRequest as e:
        if "Query is too old" in str(e):
            logger.debug("–ü—Ä–æ–ø—É—Å–∫–∞—é —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∑–∞–ø—Ä–æ—Å")
            return
        logger.error(f"–û—à–∏–±–∫–∞ Bad Request –≤ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–µ: {e}")
        metrics.increment('inline_search_errors')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞: {e}")
        metrics.increment('inline_search_errors')
        try:
            await update.inline_query.answer(
                [], 
                cache_time=1,
                is_personal=True
            )
        except Exception as inner_e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {inner_e}")

async def handle_export_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    query = update.callback_query
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if not await check_access(update):
            await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
            
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
        export_type, srid = query.data.split(':')
        srid = int(srid)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä—ã
        export_manager = ExportManager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä—ã
        export_manager.register_exporter('xml_Civil3D', Civil3DExporter({}))
        export_manager.register_exporter('prj_GMv20', GMv20Exporter({}))
        export_manager.register_exporter('prj_GMv25', GMv25Exporter({}))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_types = {
            'export_xml': 'xml_Civil3D',
            'export_gmv20': 'prj_GMv20',
            'export_gmv25': 'prj_GMv25'
        }
        
        exporter_id = export_types.get(export_type)
        if not exporter_id:
            await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è SRID
        available_formats = export_manager.get_available_formats(srid)
        if not any(fmt['id'] == exporter_id for fmt in available_formats):
            await query.answer(f"‚ùå –§–æ—Ä–º–∞—Ç {exporter_id} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è SRID {srid}", show_alert=True)
            return
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
        try:
            result = export_manager.export(srid, exporter_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await query.answer(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç {exporter_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω", show_alert=True)
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            # await context.bot.send_document(
            #     chat_id=update.effective_chat.id,
            #     document=result,
            #     filename=f"export_{srid}_{exporter_id}"
            # )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ {exporter_id} –¥–ª—è SRID {srid}: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

def dms_to_decimal(coord: str) -> float:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ DMS –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –≥—Ä–∞–¥—É—Å—ã"""
    coord = re.sub(r'\s+', ' ', coord.strip())
    parts = re.split(r'[\s¬∞\'"]+', coord)
    parts = [p for p in parts if p]
    degrees = float(parts[0])
    minutes = float(parts[1]) if len(parts) > 1 else 0
    seconds = float(parts[2]) if len(parts) > 2 else 0
    decimal = degrees + minutes / 60 + seconds / 3600
    return decimal

def parse_coordinates(input_str: str) -> tuple:
    """–†–∞–∑–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
    # –ó–∞–º–µ–Ω—è–µ–º $ –∏ % –Ω–∞ ; –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    input_str = input_str.replace('$', ';').replace('%', ';')
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    input_str = re.sub(r'\s*;\s*', ';', input_str.strip())
    parts = input_str.split(';')
    if len(parts) != 2:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è 'latitude;longitude' –∏–ª–∏ 'latitude$longitude' –∏–ª–∏ 'latitude%longitude'.")
    latitude = dms_to_decimal(parts[0])
    longitude = dms_to_decimal(parts[1])
    return latitude, longitude

async def shutdown() -> None:
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    global application
    if application:
        logger.info("–ù–∞—á–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ
            if application.running:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                application.stop_running()
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                search_processor.crs_bot.disconnect()
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                await application.stop()
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
                loop = asyncio.get_event_loop()
                if not loop.is_closed():
                    await loop.shutdown_asyncgens()
                    
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                await application.shutdown()
                
                logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                logger.info("–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if hasattr(application, 'stop_running'):
                application.stop_running()
                
def win32_handler(sig: int) -> bool:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ Windows"""
    global is_shutting_down, application
    if sig == win32con.CTRL_C_EVENT or sig == win32con.CTRL_BREAK_EVENT:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
        is_shutting_down = True
        if application:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º event loop –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
                try:
                    loop = asyncio.get_event_loop()
                except RuntimeError:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è graceful shutdown
                shutdown_task = loop.create_task(shutdown())
                try:
                    loop.run_until_complete(asyncio.wait_for(shutdown_task, timeout=5.0))
                except asyncio.TimeoutError:
                    logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è graceful shutdown, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                finally:
                    if not loop.is_closed():
                        loop.close()
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
                return False
    return False

@contextmanager
def safe_db_operation():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î"""
    try:
        yield
    except DatabaseError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        metrics.increment('db_errors')
        raise
    except QueryError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        metrics.increment('query_errors')
        raise
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        metrics.increment('unexpected_errors')
        raise

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global application
    
    if not TelegramConfig.TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.")
        logger.error(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        logger.error(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –∫ .env: {Path(__file__).resolve().parent.parent / '.env'}")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è Windows
        if os.name == 'nt':
            win32api.SetConsoleCtrlHandler(win32_handler, True)
        else:
            loop.add_signal_handler(signal.SIGINT, lambda: asyncio.create_task(shutdown()))

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π request –æ–±—ä–µ–∫—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        request = HTTPXRequest(
            connection_pool_size=100,
            read_timeout=30.0,
            write_timeout=30.0,
            connect_timeout=30.0,
            pool_timeout=30.0
        )

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = (
            Application.builder()
            .token(TelegramConfig.TOKEN)
            .request(request)
            .build()
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                AUTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, auth_check)],
                MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler)],
                WAITING_COORDINATES: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_coordinates)],
                WAITING_SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_input_handler)]
            },
            fallbacks=[
                CommandHandler("cancel", cancel),
                CommandHandler("start", start)
            ],
        )

        application.add_handler(conv_handler)
        application.add_handler(InlineQueryHandler(inline_query_handler))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        application.add_handler(
            CallbackQueryHandler(handle_export_callback, pattern=r"^export_")
        )
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        metrics.increment('bot_start')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º event loop —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            loop.run_until_complete(
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
            )
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            loop.run_until_complete(shutdown())
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ event loop
            if not loop.is_closed():
                loop.run_until_complete(loop.shutdown_asyncgens())
                loop.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        metrics.increment('bot_errors')
        if application:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π event loop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
                loop = asyncio.get_event_loop()
                if not loop.is_closed():
                    loop.run_until_complete(shutdown())
                    loop.close()
            except Exception as shutdown_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {shutdown_error}")

if __name__ == '__main__':
    main() 