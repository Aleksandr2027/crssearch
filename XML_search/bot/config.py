"""
–ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
"""

import os
from pathlib import Path
from typing import Dict, Any, Optional
from dataclasses import dataclass, field
from XML_search.config import TelegramConfig, LogConfig, CacheConfig
from XML_search.enhanced.config_enhanced import enhanced_config

@dataclass
class AuthConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    PASSWORD: str = os.getenv('ACCESS_PASSWORD', '123')
    MAX_ATTEMPTS: int = 3
    BLOCK_TIME: int = 300  # 5 –º–∏–Ω—É—Ç
    SESSION_TIMEOUT: int = 3600  # 1 —á–∞—Å

@dataclass
class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    BOT_TOKEN: str = os.getenv('TELEGRAM_TOKEN', '')
    
    # –ü—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    BASE_DIR: Path = Path(__file__).parent.parent
    DB_CONFIG_PATH: str = os.getenv('DB_CONFIG_PATH', str(BASE_DIR / "enhanced" / "config" / "database.json"))
    EXPORT_CONFIG_PATH: str = os.getenv('EXPORT_CONFIG_PATH', str(BASE_DIR / "config" / "export_config.json"))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    DB_HOST: str = os.getenv('DB_HOST', 'localhost')
    DB_PORT: int = int(os.getenv('DB_PORT', 5432))
    DB_NAME: str = os.getenv('DB_NAME', 'gis')
    DB_USER: str = os.getenv('DB_USER', 'postgres')
    DB_PASSWORD: str = os.getenv('DB_PASSWORD', 'postgres')
    DB_MIN_CONNECTIONS: int = int(os.getenv('DB_MIN_CONNECTIONS', 2))
    DB_MAX_CONNECTIONS: int = int(os.getenv('DB_MAX_CONNECTIONS', 10))
    DB_CONNECTION_TIMEOUT: float = float(os.getenv('DB_CONNECTION_TIMEOUT', 30.0))
    DB_IDLE_TIMEOUT: float = float(os.getenv('DB_IDLE_TIMEOUT', 300.0))
    DB_HEALTH_CHECK_INTERVAL: int = int(os.getenv('DB_HEALTH_CHECK_INTERVAL', 60))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LOG_LEVEL: str = os.getenv('LOG_LEVEL', 'INFO')
    LOG_FORMAT: str = os.getenv('LOG_FORMAT', '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    LOG_FILE: Optional[str] = os.getenv('LOG_FILE', None)
    HTTPS_LOG_LEVEL: str = os.getenv('HTTPS_LOG_LEVEL', 'WARNING')
    LOG_DIR: str = os.getenv('LOG_DIR', 'logs')
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
    OUTPUT_DIR: str = os.getenv('OUTPUT_DIR', 'output')
    TEMP_DIR: str = os.getenv('TEMP_DIR', 'temp')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    CACHE_ENABLED: bool = os.getenv('CACHE_ENABLED', 'True').lower() == 'true'
    CACHE_TTL: int = int(os.getenv('CACHE_TTL', 3600))
    CACHE_MAX_SIZE: int = int(os.getenv('CACHE_MAX_SIZE', 1000))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
    SEARCH_MAX_RESULTS: int = int(os.getenv('SEARCH_MAX_RESULTS', 100))
    SEARCH_TIMEOUT: int = int(os.getenv('SEARCH_TIMEOUT', 30))
    INLINE_CACHE_DURATION: int = int(os.getenv('INLINE_CACHE_DURATION', 60))
    DEFAULT_THUMB_URL: Optional[str] = os.getenv('DEFAULT_THUMB_URL', '')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Polling
    ALLOWED_UPDATES: list[str] = field(default_factory=lambda: os.getenv('ALLOWED_UPDATES', "message,edited_message,channel_post,edited_channel_post,inline_query,chosen_inline_result,callback_query,shipping_query,pre_checkout_query,poll,poll_answer,my_chat_member,chat_member,chat_join_request").split(','))
    DROP_PENDING_UPDATES: bool = os.getenv('DROP_PENDING_UPDATES', 'False').lower() == 'true'
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    DB_CONFIG = enhanced_config.database
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ç—Ä–∏–∫
    METRICS_CONFIG = enhanced_config.metrics
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
    SEARCH_CONFIG = enhanced_config.search
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    EXPORT_CONFIG = {
        'xml_Civil3D': {
            'display_name': 'Civil3D XML',
            'description': '–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç Civil3D XML',
            'extension': '.xml',
            'format_name': 'xml_Civil3D'
        },
        'prj_GMv20': {
            'display_name': 'GMv20',
            'description': '–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç GMv20',
            'extension': '.prj',
            'format_name': 'prj_GMv20'
        },
        'prj_GMv25': {
            'display_name': 'GMv25',
            'description': '–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç GMv25',
            'extension': '.prj',
            'format_name': 'prj_GMv25'
        }
    }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    ACCESS_PASSWORD: str = os.getenv('ACCESS_PASSWORD', '123')
    AUTH_CONFIG: AuthConfig = field(default_factory=lambda: AuthConfig(PASSWORD=os.getenv('ACCESS_PASSWORD', '123')))
    
    # Telegram admin ids
    ADMIN_IDS: list = field(default_factory=lambda: [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x.strip().isdigit()])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    MESSAGES: Dict[str, str] = field(default_factory=lambda: {
        'welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.',
        'auth_required': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth.',
        'auth_success': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!',
        'auth_failed': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        'auth_blocked': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}',
        'help': '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n/auth - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n/search - –ø–æ–∏—Å–∫\n/export - —ç–∫—Å–ø–æ—Ä—Ç\n/help - —Å–ø—Ä–∞–≤–∫–∞'
    })
    
    # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    MENU_BUTTONS: Dict[str, str] = field(default_factory=lambda: {
        'search_coords': '–ü–æ–∏—Å–∫ –°–ö –ø–æ Lat/Lon',
        'search_desc': '–ü–æ–∏—Å–∫ –°–ö –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é',
        'export_results': '–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
        'help': '–ü–æ–º–æ—â—å',
        'back_to_main_menu': 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    })
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        config_dir = Path(self.DB_CONFIG_PATH).parent
        if not config_dir.exists():
            config_dir.mkdir(parents=True, exist_ok=True)
        if not self.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if not self.DB_HOST:
            raise ValueError("DB_HOST –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if not isinstance(self.DB_PORT, int) or not (1024 <= self.DB_PORT <= 65535):
            raise ValueError("DB_PORT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1024 –¥–æ 65535")
        if not self.DB_NAME:
            raise ValueError("DB_NAME –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if not self.DB_USER:
            raise ValueError("DB_USER –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if not self.DB_PASSWORD:
            raise ValueError("DB_PASSWORD –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        valid_levels = {"DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"}
        if self.LOG_LEVEL not in valid_levels:
            raise ValueError(f"LOG_LEVEL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: {valid_levels}")
        if self.CACHE_TTL < 1:
            raise ValueError("CACHE_TTL –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if self.CACHE_MAX_SIZE < 1:
            raise ValueError("CACHE_MAX_SIZE –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if self.SEARCH_MAX_RESULTS < 1:
            raise ValueError("SEARCH_MAX_RESULTS –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if self.SEARCH_TIMEOUT < 1:
            raise ValueError("SEARCH_TIMEOUT –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if self.INLINE_CACHE_DURATION < 0:
            raise ValueError("INLINE_CACHE_DURATION –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è ALLOWED_UPDATES (—á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫)
        if not isinstance(self.ALLOWED_UPDATES, list) or not all(isinstance(item, str) for item in self.ALLOWED_UPDATES):
            raise ValueError("ALLOWED_UPDATES –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫")

    @classmethod
    def get_export_config(cls, format_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∞"""
        return cls.EXPORT_CONFIG.get(format_name, {}) 