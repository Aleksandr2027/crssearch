"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
import logging
import time
from telegram import Update
from telegram.ext import ContextTypes
from XML_search.bot.handlers.base_handler import BaseHandler
from XML_search.bot.config import BotConfig
from XML_search.bot.states import States
from XML_search.config import TelegramConfig
from XML_search.errors import AuthError
from XML_search.enhanced.db_manager import DatabaseManager
from XML_search.enhanced.metrics_manager import MetricsManager
from XML_search.enhanced.cache_manager import CacheManager
from XML_search.enhanced.log_manager import LogManager

class AuthHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, config: BotConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        """
        super().__init__(config)
        self.messages = config.MESSAGES
        self.auth_config = config.AUTH_CONFIG
        self.attempts_cache = CacheManager(ttl=self.auth_config.BLOCK_TIME)
        
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /auth
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        if not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if self._is_user_blocked(user_id):
            await update.message.reply_text(self.messages['auth_blocked'])
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if await self._is_user_authenticated(context):
            await update.message.reply_text(self.messages['auth_success'])
            return
            
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        await self.set_user_state(context, States.AUTH, update)
        await update.message.reply_text(self.messages['auth_required'])
        
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        Returns:
            States: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler
        """
        self.logger.info(f"[handle_message] –í—Ö–æ–¥: user_id={getattr(update.effective_user, 'id', None)}, text={getattr(update.message, 'text', None)}, state={context.user_data.get('state', None)}")
        try:
            if not update.effective_user or not update.message:
                self.logger.info("[handle_message] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é States.AUTH")
                return States.AUTH
            user_id = update.effective_user.id
            password = update.message.text
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            if password == self.auth_config.PASSWORD:
                await self._handle_successful_auth(update, context, user_id)
                self.logger.info("[handle_message] –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é States.MAIN_MENU")
                return States.MAIN_MENU
            else:
                await self._handle_failed_auth(update, context, user_id)
                self.logger.info("[handle_message] –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é States.AUTH")
                return States.AUTH
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}", exc_info=True)
            await self._handle_error(update, context, e)
            self.logger.info("[handle_message] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—é States.AUTH")
            return States.AUTH

    async def _handle_successful_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –û—á–∏—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
        self.attempts_cache.delete(str(user_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await self.set_user_state(context, States.MAIN_MENU, update)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await self._update_user_data(context, {
            'auth_time': time.time(),
            'authenticated': True,
            'auth': True
        })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(self.messages['auth_success'])
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        self.logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        self.metrics.increment('auth_success')
        
    async def _handle_failed_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        attempts = self.attempts_cache.get(str(user_id)) or 0
        attempts += 1
        self.attempts_cache.set(str(user_id), attempts)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
        if attempts >= self.auth_config.MAX_ATTEMPTS:
            await update.message.reply_text(self.messages['auth_blocked'])
            self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ {attempts} –ø–æ–ø—ã—Ç–æ–∫")
            self.metrics.increment('auth_blocked')
        else:
            await update.message.reply_text(self.messages['auth_failed'])
            self.logger.info(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø–æ–ø—ã—Ç–∫–∞ {attempts})")
            self.metrics.increment('auth_failed')
            
    def _is_user_blocked(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        attempts = self.attempts_cache.get(str(user_id))
        return attempts and attempts >= self.auth_config.MAX_ATTEMPTS
        
    async def _is_user_authenticated(self, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        """
        user_data = await self._get_user_data(context)
        if not user_data.get('authenticated'):
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
        auth_time = user_data.get('auth_time', 0)
        if time.time() - auth_time > self.auth_config.SESSION_TIMEOUT:
            await self._update_user_data(context, {'authenticated': False})
            return False
            
        return True
            
    async def check_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            user_data = await self._get_user_data(context)
            is_authorized = user_data.get('authorized', False)
            
            if not is_authorized:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
                )
                await self.set_user_state(context, States.AUTH, update)
                return False
                
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            self.metrics.increment('auth.check_error')
            raise AuthError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            
    async def logout(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            States: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        try:
            await self._update_user_data(context, {'authorized': False})
            self.metrics.increment('auth.logout')
            
            await update.message.reply_text(
                "üëã –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è."
            )
            return States.AUTH
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã: {e}")
            self.metrics.increment('auth.logout_error')
            raise AuthError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã: {e}")
            
    async def check_access(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            async with self.db_manager.get_connection() as conn:
                async with conn.cursor() as cur:
                    await cur.execute("""
                        SELECT authorized_at 
                        FROM authorized_users 
                        WHERE user_id = %s
                    """, (user_id,))
                    result = await cur.fetchone()
                    
                    if not result:
                        return False
                        
                    authorized_at = result[0]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ (24 —á–∞—Å–∞)
                    if datetime.now() - authorized_at > timedelta(hours=24):
                        return False
                        
                    return True
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞: {str(e)}")
            return False 

    async def auth_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /auth –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ BotManager
        """
        await self.handle(update, context) 

    async def auth_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ ConversationHandler
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã PTB v20+
        """
        self.logger.info(f"[auth_check] –í—Ö–æ–¥: user_id={getattr(update.effective_user, 'id', None)}, text={getattr(update.message, 'text', None)}, state={context.user_data.get('state', None)}")
        result = await self.handle_message(update, context)
        self.logger.info(f"[auth_check] –í—ã—Ö–æ–¥: –≤–æ–∑–≤—Ä–∞—â–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ {result}")
        return result 