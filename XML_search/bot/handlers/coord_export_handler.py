"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
"""

import os
from typing import Dict, Any, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile, CallbackQuery
from telegram.ext import ContextTypes, CallbackQueryHandler
from .base_handler import BaseHandler
from XML_search.enhanced.db_manager import DatabaseManager
from XML_search.enhanced.metrics_manager import MetricsManager
from XML_search.enhanced.log_manager import LogManager
from XML_search.enhanced.export.exporters.gmv20 import GMv20Exporter
from XML_search.enhanced.export.exporters.gmv25 import GMv25Exporter
from XML_search.enhanced.export.exporters.civil3d import Civil3DExporter
from XML_search.enhanced.export.exceptions import CustomWktGenerationError
from XML_search.bot.handlers.menu_handler import MenuHandler
from XML_search.bot.keyboards.main_keyboard import MainKeyboard
from XML_search.bot.states import States

class CoordExportHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
    
    def __init__(self, config, db_manager, menu_handler, metrics=None, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            menu_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            metrics: –ú–µ–Ω–µ–¥–∂–µ—Ä –º–µ—Ç—Ä–∏–∫
            logger: –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        super().__init__(config)
        self._db_manager = db_manager
        self._metrics = metrics or MetricsManager()
        self._logger = logger or LogManager().get_logger(__name__)
        self.output_dir = getattr(config, 'OUTPUT_DIR', 'output')
        os.makedirs(self.output_dir, exist_ok=True)
        self._exporters: Dict[str, Any] = {}
        self.menu_handler = menu_handler
        self._main_keyboard = MainKeyboard()
        self._logger.debug("CoordExportHandler initialized.")
    
    async def setup_exporters(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–≤"""
        self._logger.debug("setup_exporters called.")
        if not hasattr(self, '_exporters') or not self._exporters:
            self._logger.info("Initializing exporters dictionary...")
            # Create instances first to log them individually
            civil_exporter = Civil3DExporter(self.config, self._db_manager, self.output_dir)
            gmv20_exporter = GMv20Exporter(self.config, self._db_manager, self.output_dir)
            gmv25_exporter = GMv25Exporter(self.config, self._db_manager, self.output_dir)

            self._logger.info(f"Civil3DExporter instance: {civil_exporter}, type: {type(civil_exporter)}")
            self._logger.info(f"GMv20Exporter instance: {gmv20_exporter}, type: {type(gmv20_exporter)}")
            self._logger.info(f"GMv25Exporter instance: {gmv25_exporter}, type: {type(gmv25_exporter)}")

            self._exporters = {
                'xml_Civil3D': civil_exporter,
                'prj_GMV20': gmv20_exporter,
                'prj_GMV25': gmv25_exporter
            }
            self._logger.info(f"Exporters dictionary populated. Keys: {list(self._exporters.keys())}")
            for k, v_instance in self._exporters.items():
                self._logger.info(f"In dict: Exporter '{k}' -> Value: {v_instance} (type: {type(v_instance)})")
                if v_instance is None:
                    self._logger.error(f"CRITICAL INITIALIZATION ERROR: Exporter '{k}' is None in the dictionary immediately after creation!")
        else:
            self._logger.info(f"Exporters already initialized. Keys: {list(self._exporters.keys())}")
        
    async def handle_export_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, custom_callback_data: Optional[str] = None) -> Optional[States]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç.
        –ï—Å–ª–∏ 'custom_callback_data' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ. –ò–Ω–∞—á–µ –±–µ—Ä–µ—Ç –∏–∑ query.data.
        """
        query = update.callback_query
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –∏–∑ –¥—Ä—É–≥–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        if not custom_callback_data and query:
            await query.answer()

        try:
            data_to_process = custom_callback_data or (query.data if query else None)

            if not data_to_process:
                self._logger.warning("handle_export_callback called with no query data.")
                return States.WAITING_EXPORT

            await self.setup_exporters()
            
            parts = data_to_process.split('_')
            if len(parts) < 3:
                self._logger.error(f"Invalid callback data format: {data_to_process}")
                if query and query.message:
                    await query.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç.")
                return States.WAITING_EXPORT
                
            export_type = parts[1]
            srid = parts[2]
            
            export_format_map = {
                'civil3d': 'xml_Civil3D',
                'gmv20': 'prj_GMV20',
                'gmv25': 'prj_GMV25'
            }
            export_format_key = export_format_map.get(export_type)

            if not export_format_key:
                self._logger.error(f"Unsupported export type: {export_type}")
                if query and query.message:
                    await query.message.reply_text(f"–û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ '{export_type}'.")
                return States.WAITING_EXPORT

            # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É Civil3D - –æ–Ω —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
            
            self._logger.info(f"Handling {export_format_key.upper()} export for SRID {srid}.")

            exporter = self._exporters.get(export_format_key)
            if not exporter:
                self._logger.error(f"Exporter for key '{export_format_key}' not found.")
                if query and query.message:
                    await query.message.reply_text(f"–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ {export_format_key}.")
                return States.WAITING_EXPORT
            
            try:
                export_result = await exporter.export(srid)
                
                file_path = None
                if isinstance(export_result, dict):
                    file_path = export_result.get('file_path')
                elif isinstance(export_result, str):
                    file_path = export_result
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Civil3D –∑–∞–≥–ª—É—à–∫–∏
                if export_format_key == 'xml_Civil3D' and file_path == "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ":
                    self._logger.info(f"Civil3D —ç–∫—Å–ø–æ—Ä—Ç - –ø–æ–∫–∞–∑—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ: {file_path}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    chat_id = None
                    if query and query.message and hasattr(query.message, 'chat') and query.message.chat:
                        chat_id = query.message.chat.id
                    elif update.effective_chat:
                        chat_id = update.effective_chat.id
                    elif query and query.from_user:
                        chat_id = query.from_user.id
                    elif update.effective_user:
                        chat_id = update.effective_user.id
                    
                    if chat_id:
                        try:
                            await context.bot.send_message(
                                chat_id=chat_id,
                                text=f"üìÑ {file_path}"
                            )
                            self._logger.info(f"Civil3D message sent for SRID {srid}.")
                        except Exception as send_error:
                            self._logger.error(f"Failed to send Civil3D message: {send_error}", exc_info=True)
                    
                    return States.WAITING_EXPORT
                
                elif file_path and os.path.exists(file_path):
                    actual_filename = os.path.basename(file_path)
                    self._logger.info(f"Export successful. File: '{actual_filename}' at '{file_path}'. Preparing to send.")
                    
                    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∏ inline —ç–∫—Å–ø–æ—Ä—Ç–∞
                    chat_id = None
                    
                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è inline —ç–∫—Å–ø–æ—Ä—Ç–∞
                    self._logger.debug(f"–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: query={query}, update.effective_chat={update.effective_chat}, update.effective_user={update.effective_user}")
                    if query:
                        self._logger.debug(f"–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: query.message={query.message}, query.from_user={query.from_user}")
                        if query.message:
                            self._logger.debug(f"–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: query.message.chat={getattr(query.message, 'chat', '–ù–ï–¢ –ê–¢–†–ò–ë–£–¢–ê')}")
                    
                    # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ query.message.chat (–æ–±—ã—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç)
                    if query and query.message and hasattr(query.message, 'chat') and query.message.chat:
                        chat_id = query.message.chat.id
                        self._logger.debug(f"Chat ID –ø–æ–ª—É—á–µ–Ω –∏–∑ query.message.chat: {chat_id}")
                    
                    # –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ effective_chat (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
                    elif update.effective_chat:
                        chat_id = update.effective_chat.id
                        self._logger.debug(f"Chat ID –ø–æ–ª—É—á–µ–Ω –∏–∑ update.effective_chat: {chat_id}")
                    
                    # –°–ø–æ—Å–æ–± 3: –ß–µ—Ä–µ–∑ from_user –¥–ª—è inline (–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å)
                    elif query and query.from_user:
                        chat_id = query.from_user.id
                        self._logger.debug(f"Chat ID –ø–æ–ª—É—á–µ–Ω –∏–∑ query.from_user: {chat_id}")
                    
                    # –°–ø–æ—Å–æ–± 4: –ß–µ—Ä–µ–∑ effective_user (–∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π)
                    elif update.effective_user:
                        chat_id = update.effective_user.id
                        self._logger.debug(f"Chat ID –ø–æ–ª—É—á–µ–Ω –∏–∑ update.effective_user: {chat_id}")
                    
                    if chat_id:
                        try:
                            with open(file_path, 'rb') as f:
                                await context.bot.send_document(
                                    chat_id=chat_id,
                                    document=InputFile(f, filename=actual_filename),
                                    caption=f"–≠–∫—Å–ø–æ—Ä—Ç SRID={srid} –≤ —Ñ–æ—Ä–º–∞—Ç–µ {export_format_key.upper()}"
                                )
                            self._logger.info(f"Document sent for SRID {srid}, format {export_format_key}.")
                        except Exception as send_error:
                            self._logger.error(f"Failed to send document: {send_error}", exc_info=True)
                            if query and query.message:
                                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
                    else:
                        self._logger.error("Unable to determine chat_id for sending document.")
                        if query and query.message:
                            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞.")
                    
                    return States.WAITING_EXPORT
                
                else:
                    self._logger.error(f"File NOT found at the path returned by exporter: {file_path}")
                    if query and query.message:
                        await query.message.reply_text(f"–û—à–∏–±–∫–∞: —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä —Å–æ–æ–±—â–∏–ª –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞, –Ω–æ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return States.WAITING_EXPORT

            except CustomWktGenerationError as e:
                self._logger.error(f"WKT generation failed for SRID {srid}: {e}")
                if query and query.message:
                    await query.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å WKT –¥–ª—è SRID {srid}. –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
                return States.WAITING_EXPORT
            except Exception as e:
                self._logger.error(f"Failed to export SRID {srid} to {export_format_key}: {e}", exc_info=True)
                if query and query.message:
                    await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞.")
                return States.WAITING_EXPORT
        
        except Exception as e:
            self._logger.error(f"An unexpected error occurred in handle_export_callback: {e}", exc_info=True)
            if query and query.message:
                await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return States.WAITING_EXPORT

    def get_handler(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        
        Returns:
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        """
        return CallbackQueryHandler(self.handle_export_callback, pattern=r'^export_')
    
    @staticmethod
    def get_export_keyboard(srid: str) -> InlineKeyboardMarkup:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        
        Args:
            srid: SRID —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            
        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        keyboard = [
            [
                InlineKeyboardButton("xml_Civil3D", callback_data=f"export_civil3d_{srid}"),
                InlineKeyboardButton("prj_GMv20", callback_data=f"export_gmv20_{srid}"),
                InlineKeyboardButton("prj_GMv25", callback_data=f"export_gmv25_{srid}")
            ]
        ]
        return InlineKeyboardMarkup(keyboard) 

    async def handle_unsupported_export(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[States]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Civil3D)."""
        query = update.callback_query
        await query.answer("–≠—Ç–æ—Ç —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —ç–∫—Å–ø–æ—Ä—Ç
        return States.WAITING_EXPORT 