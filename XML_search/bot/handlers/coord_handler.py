"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters
from ..states import States
from .base_handler import BaseHandler
from XML_search.enhanced.db_manager import DatabaseManager
from XML_search.enhanced.metrics_manager import MetricsManager
from XML_search.enhanced.log_manager import LogManager
from XML_search.enhanced.cache_manager import CacheManager
from ..utils.format_utils import MessageFormatter
from ..utils.validation_utils import ValidationManager
from typing import Optional, List, Dict, Any, Tuple
from .coord_export_handler import CoordExportHandler
from XML_search.bot.keyboards.main_keyboard import MainKeyboard
import re
from telegram.constants import ParseMode
from telegram.helpers import escape_markdown
from dataclasses import dataclass
from XML_search.bot.utils.coord_utils import CoordinateParser, CoordinateConverter
from XML_search.bot.utils.validation_utils import ValidationResult

@dataclass
class CoordinateInput:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    latitude: float
    longitude: float

class CoordHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    
    def __init__(self, config, db_manager=None, metrics=None, logger=None, cache=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            metrics: –ú–µ–Ω–µ–¥–∂–µ—Ä –º–µ—Ç—Ä–∏–∫
            logger: –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            cache: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞
        """
        super().__init__(config)
        self._db_manager = db_manager
        self._metrics = metrics or MetricsManager()
        self._logger = logger or LogManager().get_logger(__name__)
        self.cache = cache or CacheManager()
        self.validator = ValidationManager(self._db_manager)
        self.formatter = MessageFormatter()
        self._main_keyboard = MainKeyboard()
        self.menu_handler = None
        
        # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏
        self._session_results = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å error_messages
        self.error_messages = {
            'invalid_coord_format': "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: —à–∏—Ä–æ—Ç–∞;–¥–æ–ª–≥–æ—Ç–∞",
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∑–¥–µ—Å—å
        }
        
    def _parse_coordinates(self, text: str) -> Optional[CoordinateInput]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        text = text.strip().replace(',', '.')
        
        patterns = [
            # DMS —Å —Å–∏–º–≤–æ–ª–∞–º–∏: 55¬∞45'20.88";37¬∞37'2.28"
            r'(\d+)¬∞(\d+)\'(\d+\.?\d*)"[;,:]?\s*(\d+)¬∞(\d+)\'(\d+\.?\d*)"',
            # DMS –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤: 55 45 20.88;37 37 2.28
            r'(\d+)\s+(\d+)\s+(\d+\.?\d*)[;$%]\s*(\d+)\s+(\d+)\s+(\d+\.?\d*)',
            # –ì—Ä–∞–¥—É—Å—ã –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –º–∏–Ω—É—Ç—ã: 55 45.348;37 37.038
            r'(\d+)\s+(\d+\.?\d*)[;$%]\s*(\d+)\s+(\d+\.?\d*)',
            # –ü—Ä–æ—Å—Ç—ã–µ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ: 55.7558;37.6173
            r'([+-]?\d+\.?\d*)[;$%]([+-]?\d+\.?\d*)',
            # –ü—Ä–æ—Å—Ç—ã–µ —Å –ø—Ä–æ–±–µ–ª–æ–º: 55.7558 37.6173
            r'([+-]?\d+\.?\d*)\s+([+-]?\d+\.?\d*)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                try:
                    groups = match.groups()
                    
                    if len(groups) == 6:
                        # DMS —Ñ–æ—Ä–º–∞—Ç: –≥—Ä–∞–¥—É—Å—ã –º–∏–Ω—É—Ç—ã —Å–µ–∫—É–Ω–¥—ã
                        lat_d, lat_m, lat_s, lon_d, lon_m, lon_s = groups
                        lat = float(lat_d) + float(lat_m)/60 + float(lat_s)/3600
                        lon = float(lon_d) + float(lon_m)/60 + float(lon_s)/3600
                        return CoordinateInput(lat, lon)
                    elif len(groups) == 4:
                        # –ì—Ä–∞–¥—É—Å—ã –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –º–∏–Ω—É—Ç—ã
                        lat_d, lat_m, lon_d, lon_m = groups
                        lat = float(lat_d) + float(lat_m)/60
                        lon = float(lon_d) + float(lon_m)/60
                        return CoordinateInput(lat, lon)
                    elif len(groups) == 2:
                        # –ü—Ä–æ—Å—Ç—ã–µ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        lat_str, lon_str = groups
                        return CoordinateInput(float(lat_str), float(lon_str))
                except ValueError:
                    continue
        
        return None

    def _format_single_result(self, result: Tuple) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞."""
        srid, name, deg, info, p, x, y = result

        message_parts = []
        message_parts.append(f"üî∑ *SRID*: `{srid}`")
        message_parts.append(f"üìç *–ù–∞–∑–≤–∞–Ω–∏–µ*: {self._escape_markdown_v2_safe(str(name))}")
        
        if info:
            message_parts.append(f"‚ÑπÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ*: {self._escape_markdown_v2_safe(str(info))}")
        
        if x is not None and y is not None:
            x_str = self._escape_markdown_v2_safe(f"{x:.2f}")
            y_str = self._escape_markdown_v2_safe(f"{y:.2f}")
            message_parts.append(f"üìç *–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã*: E\\: {x_str}, N\\: {y_str}")
        else:
            message_parts.append(f"üìç *–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã*: –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        if p:
            message_parts.append(f"‚úÖ *–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å*: {self._escape_markdown_v2_safe(str(p))}")
        else:
            message_parts.append(f"‚úÖ *–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å*: unknown")
            
        return "\n".join(message_parts)

    def _escape_markdown_v2_safe(self, text: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
        if not text:
            return ""
        # –í—Å–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram Bot API
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        import re
        return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

    def _create_compact_list(self, coords: CoordinateInput, results: List[Tuple]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏)"""
        lat_escaped = self._escape_markdown_v2_safe(f"{coords.latitude:.4f}")
        lon_escaped = self._escape_markdown_v2_safe(f"{coords.longitude:.4f}")
        
        message_parts = [
            f"üìç –ù–∞–π–¥–µ–Ω–æ *{len(results)}* —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è:",
            f"Lat: `{lat_escaped}` Lon: `{lon_escaped}`",
            "",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:"
        ]
        
        return "\n".join(message_parts)

    def _create_detailed_view(self, coords: CoordinateInput, results: List[Tuple], selected_srid: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –≤–∏–¥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –°–ö"""
        lat_escaped = self._escape_markdown_v2_safe(f"{coords.latitude:.4f}")
        lon_escaped = self._escape_markdown_v2_safe(f"{coords.longitude:.4f}")
        
        message_parts = [
            f"üìç –ù–∞–π–¥–µ–Ω–æ *{len(results)}* —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è:",
            f"Lat: `{lat_escaped}` Lon: `{lon_escaped}`",
            ""
        ]
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        selected_index = None
        for i, result in enumerate(results):
            srid = result[0]
            if srid == selected_srid:
                selected_index = i
                # –†–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –°–ö
                name, deg, info, p, x, y = result[1:7]
                message_parts.append(f"üî∑ *SRID*: `{srid}`")
                message_parts.append(f"üìç *–ù–∞–∑–≤–∞–Ω–∏–µ*: {self._escape_markdown_v2_safe(str(name))}")
                if info:
                    message_parts.append(f"‚ÑπÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ*: {self._escape_markdown_v2_safe(str(info))}")
                if x is not None and y is not None:
                    x_str = self._escape_markdown_v2_safe(f"{x:.2f}")
                    y_str = self._escape_markdown_v2_safe(f"{y:.2f}")
                    message_parts.append(f"üìç *–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã*: E\\: {x_str}, N\\: {y_str}")
                if p:
                    message_parts.append(f"‚úÖ *–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å*: {self._escape_markdown_v2_safe(str(p))}")
                else:
                    message_parts.append(f"‚úÖ *–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å*: unknown")
                message_parts.append(f"üì§ *–≠–∫—Å–ø–æ—Ä—Ç*:")
                break
        
        return "\n".join(message_parts)

    def _get_compact_keyboard(self, results: List[Tuple]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –°–ö
        for i, result in enumerate(results, 1):
            srid = result[0]
            name = result[1]
            name_str = str(name) if name else f"SRID {srid}"
            display_name = name_str if len(name_str) <= 15 else name_str[:12] + "..."
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÑ {display_name}",
                    callback_data=f"coord_detail:{srid}"
                )
            ])
        
        return InlineKeyboardMarkup(keyboard)

    def _get_detailed_keyboard(self, selected_srid: int, results: List[Tuple]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –≤–∏–¥–∞"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –°–ö
        export_row = [
            InlineKeyboardButton("üìÑ Civil3D", callback_data=f"coord_export:civil3d:{selected_srid}"),
            InlineKeyboardButton("üìã GMv20", callback_data=f"coord_export:gmv20:{selected_srid}"),
            InlineKeyboardButton("üìã GMv25", callback_data=f"coord_export:gmv25:{selected_srid}")
        ]
        keyboard.append(export_row)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="coord_collapse")
        ])
        
        return InlineKeyboardMarkup(keyboard)

    async def handle_coord_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            user_id = update.effective_user.id
            callback_data = query.data
            
            self._logger.info(f"–ü–æ–ª—É—á–µ–Ω coord callback: {callback_data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫—ç—à–∞ —Å–µ—Å—Å–∏–∏
            session_key = f"coord_results_{user_id}"
            if session_key not in self._session_results:
                await query.edit_message_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=None
                )
                return States.COORD_INPUT
            
            coords, results = self._session_results[session_key]
            
            if callback_data.startswith("coord_detail:"):
                # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –°–ö
                srid = int(callback_data.split(":")[1])
                detailed_text = self._create_detailed_view(coords, results, srid)
                detailed_keyboard = self._get_detailed_keyboard(srid, results)
                
                await query.edit_message_text(
                    text=detailed_text,
                    reply_markup=detailed_keyboard,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                
            elif callback_data == "coord_collapse":
                # –°–≤–µ—Ä–Ω—É—Ç—å –∫ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º—É —Å–ø–∏—Å–∫—É
                compact_text = self._create_compact_list(coords, results)
                compact_keyboard = self._get_compact_keyboard(results)
                
                await query.edit_message_text(
                    text=compact_text,
                    reply_markup=compact_keyboard,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                
            elif callback_data.startswith("coord_export:"):
                # –î–µ–ª–µ–≥–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ CoordExportHandler
                parts = callback_data.split(":")
                if len(parts) == 3:
                    _, export_format, srid = parts
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è CoordExportHandler
                    new_callback_data = f"export_{export_format}_{srid}"
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ–º custom_callback_data
                    coord_export_handler = CoordExportHandler(
                        self.config, self._db_manager, self.menu_handler,
                        self._metrics, self._logger
                    )
                    await coord_export_handler.setup_exporters()
                    await coord_export_handler.handle_export_callback(update, context, custom_callback_data=new_callback_data)
            
            return States.WAITING_EXPORT
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ coord callback: {e}", exc_info=True)
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                reply_markup=None
            )
            return States.COORD_INPUT

    async def handle_coordinates(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        try:
            # –Ø–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if self._db_manager and hasattr(self._db_manager, 'initialize'):
                await self._db_manager.initialize()
            if update.message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
                # –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ menu_handler
                if hasattr(self, 'menu_handler'):
                    await self.menu_handler.show_main_menu(update, context)
                return States.MAIN_MENU
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await update.message.reply_text(
                "üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏..."
            )
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            coords = self._parse_coordinates(update.message.text)
            if not coords:
                await processing_message.edit_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: '—à–∏—Ä–æ—Ç–∞;–¥–æ–ª–≥–æ—Ç–∞' –∏–ª–∏ '—à–∏—Ä–æ—Ç–∞$–¥–æ–ª–≥–æ—Ç–∞' –∏–ª–∏ '—à–∏—Ä–æ—Ç–∞%–¥–æ–ª–≥–æ—Ç–∞'"
                )
                return States.COORD_INPUT
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ç–æ—á–∫–∏
            results = []
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
                query = """
                    SELECT cg.srid, cg.name, cg.deg, cg.info, cg.p
                    FROM public.custom_geom cg
                    WHERE ST_Contains(cg.geom, ST_SetSRID(ST_MakePoint($1, $2), 4326))
                    AND cg.srid BETWEEN 100000 AND 101500;
                """
                base_results = await self._db_manager.fetch(query, coords.longitude, coords.latitude)
                transform_query = """
                    SELECT ST_X(transformed) AS x, ST_Y(transformed) AS y
                    FROM (SELECT ST_Transform(ST_SetSRID(ST_MakePoint($1, $2), 4326), CAST($3 AS INTEGER)) AS transformed) AS subquery;
                """
                for row in base_results:
                    srid = row['srid']
                    name = row['name']
                    deg = row['deg']
                    info = row['info']
                    p = row['p']
                    try:
                        coords_result = await self._db_manager.fetchrow(transform_query, coords.longitude, coords.latitude, srid)
                        if coords_result and coords_result['x'] is not None and coords_result['y'] is not None:
                            results.append((srid, name, deg, info, p, coords_result['x'], coords_result['y']))
                        else:
                            results.append((srid, name, deg, info, p, None, None))
                    except Exception as e:
                        self._logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è SRID {srid}: {e}")
                        await self._metrics.record_error('coord_transform', str(e))
                        results.append((srid, name, deg, info, p, None, None))
                # –î–æ–±–∞–≤–ª—è–µ–º UTM –∑–æ–Ω—É –¥–ª—è —Å–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—à–∞—Ä–∏—è
                if coords.latitude >= 0:
                    utm_zone = int((coords.longitude + 180) // 6) + 1
                    if 1 <= utm_zone <= 60:
                        srid_utm = 32600 + utm_zone
                        try:
                            utm_coords = await self._db_manager.fetchrow(transform_query, coords.longitude, coords.latitude, srid_utm)
                            if utm_coords and utm_coords['x'] is not None and utm_coords['y'] is not None:
                                results.append((
                                    srid_utm,
                                    f"UTM zone {utm_zone}N",
                                    6,
                                    "WGS84",
                                    "EPSG",
                                    utm_coords['x'],
                                    utm_coords['y']
                                ))
                            else:
                                results.append((
                                    srid_utm,
                                    f"UTM zone {utm_zone}N",
                                    6,
                                    "WGS84",
                                    "EPSG",
                                    None,
                                    None
                                ))
                        except Exception as e:
                            self._logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ UTM –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
                            await self._metrics.record_error('utm_transform', str(e))
                            results.append((
                                srid_utm,
                                f"UTM zone {utm_zone}N",
                                6,
                                "WGS84",
                                "EPSG",
                                None,
                                None
                            ))
            except Exception as e:
                self._logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
                await self._metrics.record_error('coord_search', str(e))
                await processing_message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."
                )
                return States.COORD_INPUT

            self._logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –°–ö –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {coords.latitude}, {coords.longitude}")

            if results:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à–µ —Å–µ—Å—Å–∏–∏
                user_id = update.effective_user.id
                session_key = f"coord_results_{user_id}"
                self._session_results[session_key] = (coords, results)
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                compact_text = self._create_compact_list(coords, results)
                compact_keyboard = self._get_compact_keyboard(results)
                
                # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫..." –Ω–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
                await processing_message.edit_text(
                    text=compact_text,
                    reply_markup=compact_keyboard,
                    parse_mode=ParseMode.MARKDOWN_V2
                )

                self._logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ WAITING_EXPORT –¥–ª—è user_id={user_id}")
                return States.WAITING_EXPORT
            else:
                await processing_message.edit_text(
                    "‚ùå –°–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã."
                )
                return States.COORD_INPUT

        except ValueError as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}", exc_info=True)
            await self._metrics.record_error('coord_handler', str(e))
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if update and update.message:
                await update.message.reply_text(error_message)
            return States.COORD_INPUT
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}", exc_info=True)
            await self._metrics.record_error('coord_handler', str(e))
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."
            if update and update.message:
                await update.message.reply_text(error_message)
            return States.COORD_ERROR
    
    def get_handler(self) -> MessageHandler:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Returns:
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        return MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.handle_coord_input
        )

    async def _handle_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        return await self.handle_coordinates(update, context)

    async def handle_coord_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        user_id = update.effective_user.id
        text = update.message.text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if text == MainKeyboard.BUTTON_MENU:
            self._logger.info(f"User {user_id} requested main menu from COORD_INPUT state using '{text}'.")
            await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
            return States.MAIN_MENU

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫ –°–ö –ø–æ Lat/Lon" —É–∂–µ –Ω–∞—Ö–æ–¥—è—Å—å –≤ COORD_INPUT
        if text == MainKeyboard.BUTTON_SEARCH_COORD:
            self._logger.info(f"User {user_id} sent button text '{text}' in COORD_INPUT state. Re-prompting for coordinates.")
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é MenuHandler –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
            await update.message.reply_text(
                "üìç –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'latitude;longitude' –∏–ª–∏ 'latitude$longitude' –∏–ª–∏ 'latitude%longitude'\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:\n"
                "1. –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –≥—Ä–∞–¥—É—Å—ã: 55.7558;37.6173 –∏–ª–∏ 55.7558$37.6173 –∏–ª–∏ 55.7558%37.6173\n"
                "2. –ì—Ä–∞–¥—É—Å—ã –∏ –º–∏–Ω—É—Ç—ã: 55 45.348;37 37.038 –∏–ª–∏ 55 45.348$37 37.038 –∏–ª–∏ 55 45.348%37 37.038\n"
                "3. –ì—Ä–∞–¥—É—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã: 55 45 20.88;37 37 2.28 –∏–ª–∏ 55 45 20.88$37 37 2.28 –∏–ª–∏ 55 45 20.88%37 37 2.28\n"
                "4. –° –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏: 55¬∞45\'20.88\";37¬∞37\'2.28\" –∏–ª–∏ 55¬∞45\'20.88\"$37¬∞37\'2.28\" –∏–ª–∏ 55¬∞45\'20.88\"%37¬∞37\'2.28\"\n\n"
                "–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —à–∏—Ä–æ—Ç–æ–π –∏ –¥–æ–ª–≥–æ—Ç–æ–π - —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;) –∏–ª–∏ –∑–Ω–∞–∫ –¥–æ–ª–ª–∞—Ä–∞ ($) –∏–ª–∏ –∑–Ω–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (%)"
            )
            return States.COORD_INPUT

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π/–∫–Ω–æ–ø–∫–æ–π, —Ç–æ–≥–¥–∞ —ç—Ç–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
        self._logger.info(f"[CoordHandler.handle_coord_input] User {user_id} entered text, passing to handle_coordinates: {text}")
        return await self.handle_coordinates(update, context) 