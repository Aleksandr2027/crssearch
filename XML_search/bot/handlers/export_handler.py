"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
"""

from typing import Optional, List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackContext, CommandHandler
from XML_search.bot.handlers.base_handler import BaseHandler
from XML_search.bot.config import BotConfig
from XML_search.bot.states import States
from XML_search.enhanced.metrics_manager import MetricsManager
from XML_search.enhanced.log_manager import LogManager
from XML_search.enhanced.cache_manager import CacheManager
from XML_search.enhanced.export.export_manager import ExportManager

class ExportHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    
    def __init__(self, config: BotConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        """
        super().__init__(config)
        self.messages = config.MESSAGES
        self.export_config = config.EXPORT_CONFIG
        
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            if not update.effective_user:
                return
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.log_access(update.effective_user.id, 'export_command')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            user_data = await self._get_user_data(context)
            if not user_data.get('authenticated', False):
                await update.effective_message.reply_text(self.messages['auth_request'])
                await self.set_user_state(context, States.AUTH, update)
                return
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
            await self._show_export_menu(update, context)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ ExportHandler.handle: {e}", exc_info=True)
            self.metrics.increment('export_command_error')
            error_message = self.messages.get('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            if update and update.effective_message:
                await update.effective_message.reply_text(error_message)
        
    async def handle_callback(self, update: Update, context: CallbackContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "back_to_menu":
                await query.message.edit_reply_markup(reply_markup=None)
                await self.clear_user_state(context)
                return
                
            elif query.data.startswith("export_"):
                format_name = query.data.replace("export_", "")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = await self._get_user_data(context)
                srid = user_data.get('selected_srid')
                
                if not srid:
                    await query.message.edit_text(
                        "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search –¥–ª—è –ø–æ–∏—Å–∫–∞."
                    )
                    return
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
                try:
                    async with self.db_operation() as db:
                        export_manager = ExportManager(db)
                        result = await export_manager.export(srid, format_name)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        await query.message.edit_text(
                            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_name.upper()}:\n\n"
                            f"```\n{result}\n```",
                            parse_mode='Markdown'
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
                        keyboard = [[
                            InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
                        ]]
                        await query.message.edit_reply_markup(
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                        
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
                    await query.message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            self.metrics.increment('export_callback_errors')
            await self._handle_error(update, context, e)
        
    async def _show_export_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ü–æ–∫–∞–∑ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        if not update.effective_chat:
            return
            
        keyboard = []
        for format_name, format_config in self.export_config.items():
            keyboard.append([
                InlineKeyboardButton(
                    format_config['display_name'],
                    callback_data=f"export_{format_name}"
                )
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            keyboard.append([
                InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
            ])
            
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.effective_chat.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            reply_markup=reply_markup
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await self.set_user_state(context, States.EXPORT_MENU, update)
        
    async def handle_export_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Any:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è ConversationHandler
        """
        return await self.handle_callback(update, context)

    async def handle_format_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Any:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è ConversationHandler
        """
        return await self.handle_callback(update, context) 
        
    def get_handler(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ BotManager
        
        Returns:
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export
        """
        return CommandHandler("export", self.handle) 