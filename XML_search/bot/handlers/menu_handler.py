"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞
"""

from typing import Optional, Any
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from XML_search.enhanced.db_manager import DatabaseManager
from XML_search.enhanced.metrics_manager import MetricsManager
from XML_search.enhanced.log_manager import LogManager
from XML_search.enhanced.cache_manager import CacheManager
from XML_search.enhanced.export.export_manager import ExportManager
from ..states import States
from .base_handler import BaseHandler
from .auth_handler import AuthHandler
from XML_search.bot.config import BotConfig
import logging

class MenuHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    
    def __init__(self, 
                 config: BotConfig,
                 db_manager: Optional[DatabaseManager] = None,
                 metrics: Optional[MetricsManager] = None,
                 auth_handler: Optional[AuthHandler] = None,
                 logger: Optional[LogManager] = None,
                 cache: Optional[CacheManager] = None,
                 export_manager: Optional[ExportManager] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—é
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            metrics: –°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
            auth_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            logger: –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            cache: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞
            export_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        super().__init__(config)
        self._db_manager = db_manager
        self.metrics = metrics or MetricsManager()
        self.auth_handler = auth_handler
        self.logger = logger or logging.getLogger(self.__class__.__module__)
        self.cache = cache or CacheManager(ttl=config.CACHE_TTL, max_size=config.CACHE_MAX_SIZE)
        self.export_manager = export_manager
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        self.BUTTON_COORD_SEARCH = '–ü–æ–∏—Å–∫ –°–ö –ø–æ Lat/Lon'
        self.BUTTON_DESC_SEARCH = '–ü–æ–∏—Å–∫ –°–ö –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é'
        self.BUTTON_MENU = 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        
    async def _handle_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            States: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await self.auth_handler.check_auth(update, context):
                return States.AUTH
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.show_main_menu(update, context)
            return States.MAIN_MENU
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ MenuHandler: {str(e)}")
            await self._handle_error(update, context, e)
            return States.ERROR
        
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        user_id = update.effective_user.id
        self.logger.info(f"[MenuHandler.show_main_menu] user_id={user_id} ‚Äî –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        self.log_access(user_id, 'show_main_menu')
        self.metrics.increment('main_menu_show')
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton(self.BUTTON_COORD_SEARCH)],
            [KeyboardButton(self.BUTTON_DESC_SEARCH)]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            reply_markup=reply_markup
        )
        
    async def handle_menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            States: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        self.logger.info(f"[MenuHandler.handle_menu_command] –í—Ö–æ–¥: user_id={getattr(update.effective_user, 'id', None)}, text={getattr(update.message, 'text', None)}")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            is_auth = await self.auth_handler.check_auth(update, context)
            self.logger.info(f"[MenuHandler.handle_menu_command] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {is_auth}")
            if not is_auth:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
                return States.AUTH
            await self.show_main_menu(update, context)
            self.logger.info(f"[MenuHandler.handle_menu_command] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {getattr(update.effective_user, 'id', None)}")
            return States.MAIN_MENU
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /menu: {e}")
            self.metrics.increment('menu_command_error')
            await self._handle_error(update, context, e)
            return States.ERROR
            
    async def handle_help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            States: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        try:
            help_text = (
                "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "/search - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\n"
                "/export - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
                "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
                "/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
            )
        
            await update.message.reply_text(help_text)
            return States.MAIN_MENU
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help: {e}")
            self.metrics.increment('help_command_error')
            await self._handle_error(update, context, e)
            return States.ERROR
            
    async def handle_cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            States: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        try:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.clear_user_state(context)
            
            await update.message.reply_text(
                "üîÑ –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            )
            return States.MAIN_MENU
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /cancel: {e}")
            self.metrics.increment('cancel_command_error')
            await self._handle_error(update, context, e)
            return States.ERROR

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ BotManager
        """
        self.logger.info(f"[MenuHandler.start] –í—Ö–æ–¥: user_id={getattr(update.effective_user, 'id', None)}, text={getattr(update.message, 'text', None)}")
        result = await self.handle_menu_command(update, context)
        self.logger.info(f"[MenuHandler.start] –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return result

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ BotManager
        """
        return await self.handle_help_command(update, context)

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ BotManager
        """
        return await self.handle_cancel_command(update, context)

    async def handle_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ ConversationHandler
        """
        return await self.handle_menu_command(update, context)