"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
"""

from typing import Dict, List, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackContext
from XML_search.enhanced.db_manager import DatabaseManager
from XML_search.enhanced.metrics_manager import MetricsManager
from XML_search.enhanced.log_manager import LogManager
from XML_search.enhanced.cache_manager import CacheManager
from XML_search.bot.states import States
from XML_search.bot.handlers.base_handler import BaseHandler
from XML_search.bot.config import BotConfig

class SearchHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    
    def __init__(self, config: BotConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        """
        super().__init__(config)
        self.messages = config.MESSAGES
        self.items_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        if not update.effective_user:
            return
            
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.log_access(update.effective_user.id, 'search_command')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        user_data = await self._get_user_data(context)
        if not user_data.get('auth', False):
            await update.effective_message.reply_text(self.messages['auth_request'])
            await self.set_user_state(context, States.AUTH, update)
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
        await self._show_search_menu(update, context)
        
    async def _show_search_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        if not update.effective_chat:
            return
            
        keyboard = [
            [
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º", callback_data="search_coords"),
                InlineKeyboardButton("üìù –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="search_desc")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.effective_chat.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            reply_markup=reply_markup
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await self.set_user_state(context, States.SEARCH_MENU, update)
        
    async def _handle_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            States: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        try:
            if not update.message or not update.message.text:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞."
                )
                return States.SEARCH_WAITING
                
            query = update.message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
            if len(query) < 3:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
                )
                return States.SEARCH_WAITING
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = await self._perform_search(query, {})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            await self._update_user_data(
                context,
                {
                    'search_results': results,
                    'current_page': 0,
                    'query': query
                }
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self._show_search_results(update, context, results)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫
            self.log_access(
                update.effective_user.id,
                'search_completed',
                {'results_count': len(results)}
            )
            self.metrics.increment('search_success')
            
            return States.SEARCH_RESULTS
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∏—Å–∫–∞: {e}")
            self.metrics.increment('search_errors')
            await self._handle_error(update, context, e)
            return States.SEARCH_ERROR
            
    async def _perform_search(self, query: str, filters: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            filters: –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            
        Returns:
            List[Dict[str, Any]]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ LIKE
            async with self.db_operation() as db:
                search_query = """
                    SELECT srid, auth_name, auth_srid, srtext, proj4text
                    FROM spatial_ref_sys
                    WHERE srtext ILIKE %s
                    OR auth_name ILIKE %s
                    OR CAST(srid AS TEXT) = %s
                    ORDER BY srid
                    LIMIT 50
                """
                params = (f"%{query}%", f"%{query}%", query)
                results = await db.execute_query(search_query, params)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                formatted_results = []
                for row in results:
                    formatted_results.append({
                        'srid': row['srid'],
                        'name': row['auth_name'],
                        'description': row['srtext'],
                        'proj4': row['proj4text']
                    })
                
                return formatted_results
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
            self.metrics.increment('search_query_errors')
            raise
            
    async def _show_search_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE, results: List[Dict[str, Any]]) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        if not results:
            await update.message.reply_text(
                "üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        user_data = await self._get_user_data(context)
        current_page = user_data.get('current_page', 0)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        start_idx = current_page * self.items_per_page
        end_idx = start_idx + self.items_per_page
        page_results = results[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message_text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
        for idx, result in enumerate(page_results, start=1):
            message_text += (
                f"{idx}. SRID: {result['srid']}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['name']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {result['description'][:100]}...\n\n"
            )
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        for idx, result in enumerate(page_results, start=1):
            keyboard.append([
                InlineKeyboardButton(
                    f"–í—ã–±—Ä–∞—Ç—å {idx}",
                    callback_data=f"select_srid_{result['srid']}"
                )
            ])
            
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        navigation = []
        if current_page > 0:
            navigation.append(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page")
            )
        if end_idx < len(results):
            navigation.append(
                InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next_page")
            )
        if navigation:
            keyboard.append(navigation)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard.append([
            InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup
        )

    async def handle_callback(self, update: Update, context: CallbackContext) -> States:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            States: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "back_to_menu":
                await query.message.edit_reply_markup(reply_markup=None)
                return States.MAIN_MENU
                
            elif query.data == "prev_page":
                user_data = await self._get_user_data(context)
                current_page = user_data.get('current_page', 0)
                if current_page > 0:
                    await self._update_user_data(context, {'current_page': current_page - 1})
                    results = user_data.get('search_results', [])
                    await self._show_search_results(update, context, results)
                    
            elif query.data == "next_page":
                user_data = await self._get_user_data(context)
                current_page = user_data.get('current_page', 0)
                results = user_data.get('search_results', [])
                if (current_page + 1) * self.items_per_page < len(results):
                    await self._update_user_data(context, {'current_page': current_page + 1})
                    await self._show_search_results(update, context, results)
                    
            elif query.data.startswith("select_srid_"):
                srid = query.data.split("_")[-1]
                await self._update_user_data(context, {'selected_srid': srid})
                await query.message.edit_text(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å SRID: {srid}\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                    reply_markup=self._get_export_keyboard()
                )
                return States.EXPORT_FORMAT
                
            return States.SEARCH_RESULTS
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            self.metrics.increment('callback_errors')
            await self._handle_error(update, context, e)
            return States.SEARCH_ERROR
            
    def _get_export_keyboard(self) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        keyboard = [
            [
                InlineKeyboardButton("Civil 3D", callback_data="export_civil3d"),
                InlineKeyboardButton("GMv20", callback_data="export_gmv20")
            ],
            [
                InlineKeyboardButton("GMv25", callback_data="export_gmv25")
            ],
            [
                InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def handle_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Any:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –¥–ª—è ConversationHandler
        """
        return await self._handle_update(update, context)

    async def handle_filter_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Any:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ConversationHandler
        """
        return await self.handle_callback(update, context)

    async def handle_pagination_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Any:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ ConversationHandler
        """
        return await self.handle_callback(update, context)

    async def handle_filter_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Any:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è ConversationHandler
        """
        return await self.handle_search(update, context) 