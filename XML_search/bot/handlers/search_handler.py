"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
"""

import os
from typing import Dict, List, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, CallbackContext, CommandHandler, ConversationHandler, MessageHandler, filters, CallbackQueryHandler
from XML_search.enhanced.db_manager import DatabaseManager
from XML_search.enhanced.metrics_manager import MetricsManager
from XML_search.enhanced.log_manager import LogManager
from XML_search.enhanced.cache_manager import CacheManager
from XML_search.enhanced.transliterator import Transliterator
from XML_search.bot.states import States
from XML_search.bot.handlers.base_handler import BaseHandler
from XML_search.bot.config import BotConfig
from XML_search.enhanced.search.search_engine import EnhancedSearchEngine
from XML_search.bot.keyboards.inline_keyboard import get_export_keyboard_for_srid
from XML_search.bot.keyboards.main_keyboard import MainKeyboard
from XML_search.enhanced.export.exporters.gmv20 import GMv20Exporter
from XML_search.enhanced.export.exporters.gmv25 import GMv25Exporter
from XML_search.enhanced.export.exporters.civil3d import Civil3DExporter
from telegram import InputFile
import re # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º re –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
import uuid
import logging
from XML_search.bot.handlers.coord_export_handler import CoordExportHandler

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    if not text:
        return ""
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram Bot API
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

class SearchHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    
    # –û–ü–†–ï–î–ï–õ–Ø–ï–ú _log_wrapper –ö–ê–ö –ú–ï–¢–û–î –ö–õ–ê–°–°–ê
    def _log_wrapper(self, handler_func, name):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = getattr(update.effective_user, 'id', None) if update.effective_user else None
            self._logger.info(f"[SearchFSM] {name}: user_id={user_id}, state={context.user_data.get('state') if context.user_data else 'N/A'}")
            try:
                result = await handler_func(update, context)
                if isinstance(result, States):
                    self._logger.info(f"[SearchFSM] {name}: new_state={result}, user_id={user_id}")
                return result
            except Exception as e:
                self._logger.error(f"[SearchFSM] {name}: –û–®–ò–ë–ö–ê={e}, user_id={user_id}", exc_info=True)
                if update.callback_query:
                    try:
                        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
                    except Exception: pass
                elif update.message:
                    try:
                        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    except Exception: pass
                return States.MAIN_MENU
        return wrapper

    def __init__(self, config: BotConfig, db_manager=None, metrics=None, logger=None, cache=None, menu_handler=None, enhanced_search_engine: Optional[EnhancedSearchEngine] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            metrics: –ú–µ–Ω–µ–¥–∂–µ—Ä –º–µ—Ç—Ä–∏–∫
            logger: –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            cache: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞
            menu_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
            enhanced_search_engine: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
        """
        super().__init__(config)
        self.messages = config.MESSAGES
        self.items_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        self._db_manager = db_manager
        self._metrics = metrics or MetricsManager()
        self._logger = logger or LogManager().get_logger(__name__)
        self.cache = cache or CacheManager()
        self.menu_handler = menu_handler
        self.transliterator = Transliterator()  # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ç–æ—Ä
        self.enhanced_search_engine = enhanced_search_engine
        self.output_dir = getattr(config, 'OUTPUT_DIR', 'output')
        os.makedirs(self.output_dir, exist_ok=True)
        self.coord_export_handler: Optional[CoordExportHandler] = None # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç
        
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        if not update.effective_user:
            return
            
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await self.log_access(update.effective_user.id, 'search_command')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        user_data = await self._get_user_data(context)
        if not user_data.get('authenticated', False):
            await update.effective_message.reply_text(self.messages['auth_request'])
            await self.set_user_state(context, States.AUTH, update)
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
        await self._show_search_menu(update, context)
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥–æ—Ç–æ–≤
        if self.coord_export_handler and not self.coord_export_handler._exporters:
            await self.coord_export_handler.setup_exporters()
        
    async def _show_search_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        if not update.effective_chat:
            return
            
        keyboard = [
            [
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º", callback_data="search_coords"),
                InlineKeyboardButton("üìù –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="search_desc")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.effective_chat.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            reply_markup=reply_markup
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await self.set_user_state(context, States.SEARCH_INPUT, update)
        
    async def _handle_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            States: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        if update.message and update.message.text and update.message.text.strip().startswith("üî∑ SRID:"):
            self._logger.info(f"[_handle_update] –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ '—ç—Ö–∞' –æ—Ç –≤—ã–±–æ—Ä–∞ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {update.message.text[:100]}...")
            current_fsm_state = await self.get_user_state(context)
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞.
            return current_fsm_state if current_fsm_state in [States.SEARCH_INPUT, States.SEARCH_RESULTS] else States.SEARCH_INPUT

        query_type = context.user_data.get("query_type", "description")
        current_filters = context.user_data.get("search_filters", {})
        
        try:
            if not update.message or not update.message.text:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞."
                )
                return States.SEARCH_INPUT
                
            query = update.message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
            if len(query) < 3:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
                )
                return States.SEARCH_INPUT
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = await self._perform_search(query, {})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            await self._update_user_data(
                context,
                {
                    'search_results': results,
                    'current_page': 0,
                    'query': query
                }
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self._show_search_results(update, context, results)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫
            await self.log_access(
                update.effective_user.id,
                'search_completed',
                {'results_count': len(results)}
            )
            if self._metrics:
                start_time = self._metrics.start_operation('search_success')
                await self._metrics.record_operation('search_success', start_time)
            
            return States.SEARCH_RESULTS
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∏—Å–∫–∞: {e}")
            if hasattr(self, '_metrics') and self._metrics:
                await self._metrics.record_error('search_error', str(e))
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return States.SEARCH_ERROR
            
    async def _perform_search(self, query: str, filters: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            filters: –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            
        Returns:
            List[Dict[str, Any]]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        try:
            if not self._db_manager:
                self._logger.error("–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ SearchHandler!")
                raise RuntimeError("–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            
            # –ü–æ–∏—Å–∫ –≤ custom_geom (–æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
            search_query_custom = """
                SELECT cg.srid, cg.name, cg.deg, cg.info, cg.p
                FROM public.custom_geom cg
                WHERE (
                    cg.name ILIKE $1
                    OR cg.info ILIKE $2
                    OR CAST(cg.srid AS TEXT) = $3
                    OR cg.p ILIKE $4
                )
                ORDER BY 
                    CASE 
                        WHEN CAST(cg.srid AS TEXT) = $5 THEN 1
                        WHEN cg.name ILIKE $6 THEN 2
                        WHEN cg.info ILIKE $7 THEN 3
                        ELSE 4
                    END,
                    cg.srid
                LIMIT 50
            """
            params = (
                f"%{query}%", f"%{query}%", query, f"%{query}%",  # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏
                query, f"%{query}%", f"%{query}%"  # –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            )
            
            results_custom = await self._db_manager.fetch(search_query_custom, *params)
            
            # –ü–æ–∏—Å–∫ UTM —Å–∏—Å—Ç–µ–º –≤ spatial_ref_sys (—Ç–æ–ª—å–∫–æ –∑–æ–Ω—ã —Å–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—à–∞—Ä–∏—è 32601-32660)
            search_query_utm = """
                SELECT srs.srid, srs.auth_name, srs.auth_srid, srs.srtext, srs.proj4text
                FROM public.spatial_ref_sys srs
                WHERE srs.srid BETWEEN 32601 AND 32660
                AND (
                    CAST(srs.srid AS TEXT) = $1
                    OR srs.srtext ILIKE $2
                    OR srs.proj4text ILIKE $3
                )
                ORDER BY srs.srid
                LIMIT 10
            """
            utm_params = (query, f"%{query}%", f"%{query}%")
            
            results_utm = await self._db_manager.fetch(search_query_utm, *utm_params)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            formatted_results = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ custom_geom
            for row in results_custom:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–º –ø–æ–∏—Å–∫–µ
                if str(row['srid']).startswith('326'):
                    p_value = "EPSG"
                else:
                    p_value = row['p'] if row['p'] is not None else "unknown"
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                self._logger.debug(f"Custom result: srid={row['srid']}, name='{row['name']}', info='{row['info']}', p='{row['p']}'")
                
                formatted_results.append({
                    'srid': row['srid'],
                    'name': row['name'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º name –∏–∑ custom_geom
                    'info': row['info'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º info –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ
                    'p': p_value,  # –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å
                    'deg': row['deg'],  # –°—Ç–µ–ø–µ–Ω—å —Ç–æ—á–Ω–æ—Å—Ç–∏
                    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
                    'auth_name': p_value,
                    'auth_srid': row['srid'],
                    'srtext': row['info'],
                    'proj4text': row['info'],
                    'description': row['info']
                })
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º UTM —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ spatial_ref_sys
            for row in results_utm:
                srid = row['srid']
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä UTM –∑–æ–Ω—ã –∏–∑ SRID
                utm_zone = srid - 32600
                name = f"UTM zone {utm_zone}N"
                description = "WGS84"
                
                formatted_results.append({
                    'srid': srid,
                    'name': name,
                    'info': description,
                    'p': "EPSG",  # UTM —Å–∏—Å—Ç–µ–º—ã –≤—Å–µ–≥–¥–∞ EPSG
                    'deg': 6,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å –¥–ª—è UTM
                    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
                    'auth_name': "EPSG",
                    'auth_srid': srid,
                    'srtext': description,
                    'proj4text': description,
                    'description': description
                })
            
            return formatted_results
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
            if hasattr(self, '_metrics') and self._metrics:
                await self._metrics.record_error('search_query', str(e))
            raise
            
    async def _show_search_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE, results: List[Dict[str, Any]]) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        if not results:
            await update.message.reply_text(
                "üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        user_data = await self._get_user_data(context)
        current_page = user_data.get('current_page', 0)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        start_idx = current_page * self.items_per_page
        end_idx = start_idx + self.items_per_page
        page_results = results[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message_text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
        for idx, result in enumerate(page_results, start=1):
            message_text += (
                f"{idx}. SRID: {result['srid']}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['name']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {result['description'][:100]}...\n\n"
            )
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        for idx, result in enumerate(page_results, start=1):
            keyboard.append([
                InlineKeyboardButton(
                    f"–í—ã–±—Ä–∞—Ç—å {idx}",
                    callback_data=f"select_srid_{result['srid']}"
                )
            ])
            
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        navigation = []
        if current_page > 0:
            navigation.append(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page")
            )
        if end_idx < len(results):
            navigation.append(
                InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next_page")
            )
        if navigation:
            keyboard.append(navigation)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard.append([
            InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup
        )

    async def handle_callback(self, update: Update, context: CallbackContext) -> States:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            States: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "back_to_menu":
                await query.message.edit_reply_markup(reply_markup=None)
                return States.MAIN_MENU
                
            elif query.data == "prev_page":
                user_data = await self._get_user_data(context)
                current_page = user_data.get('current_page', 0)
                if current_page > 0:
                    await self._update_user_data(context, {'current_page': current_page - 1})
                    results = user_data.get('search_results', [])
                    await self._show_search_results(update, context, results)
                    
            elif query.data == "next_page":
                user_data = await self._get_user_data(context)
                current_page = user_data.get('current_page', 0)
                results = user_data.get('search_results', [])
                if (current_page + 1) * self.items_per_page < len(results):
                    await self._update_user_data(context, {'current_page': current_page + 1})
                    await self._show_search_results(update, context, results)
                    
            elif query.data.startswith("select_srid_"):
                srid = query.data.split("_")[-1]
                await self._update_user_data(context, {'selected_srid': srid})
                await query.message.edit_text(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å SRID: {srid}\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                    reply_markup=self._get_export_keyboard()
                )
                return States.EXPORT_FORMAT
                
            return States.SEARCH_RESULTS
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            if self._metrics:
                await self._metrics.record_error('callback_errors', str(e))
            await self._handle_error(update, context, e)
            return States.SEARCH_ERROR
            
    def _get_export_keyboard(self) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        keyboard = [
            [
                InlineKeyboardButton("Civil 3D", callback_data="export_civil3d"),
                InlineKeyboardButton("GMv20", callback_data="export_gmv20")
            ],
            [
                InlineKeyboardButton("GMv25", callback_data="export_gmv25")
            ],
            [
                InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    def _get_export_keyboard_for_srid(self, srid: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ SRID (inline —Ä–µ–∂–∏–º)
        
        Args:
            srid: SRID —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        keyboard = [
            [
                InlineKeyboardButton("üìÑ Civil3D", callback_data=f"inline_export_xml_Civil3D_{srid}"),
                InlineKeyboardButton("üìã GMv20", callback_data=f"inline_export_prj_GMV20_{srid}"),
                InlineKeyboardButton("üìã GMv25", callback_data=f"inline_export_prj_GMV25_{srid}")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def handle_inline(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        query = update.inline_query.query
        if not query or len(query) < 3:
            if self._logger:
                self._logger.debug(f"–ò–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π: '{query}'")
            await update.inline_query.answer([], cache_time=10)
            return

        if self._logger:
            self._logger.info(f"–ü–æ–ª—É—á–µ–Ω –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å: '{query}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.inline_query.from_user.id}")

        try:
            if self.enhanced_search_engine:
                results = await self.enhanced_search_engine.search(query, limit=10)
            else:
                if self._logger:
                    self._logger.error("EnhancedSearchEngine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ SearchHandler –¥–ª—è –∏–Ω–ª–∞–π–Ω-–ø–æ–∏—Å–∫–∞.")
                await update.inline_query.answer([], cache_time=10)
                return
                
            if self._logger:
                 self._logger.info(f"EnhancedSearchEngine –≤–µ—Ä–Ω—É–ª {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞: '{query}'")

            articles = []
            for res in results:
                srid = res.get('srid')
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è name –∏ description
                name_val = str(res.get('name', f'SRID: {srid}'))
                description_val = str(res.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))
                # auth_name_val = str(res.get('auth_name', 'unknown')) # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏

                # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 'p'
                p_value = res.get('p')
                p_value_str = "unknown" # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if isinstance(p_value, bool):
                    p_value_str = str(p_value).lower()
                elif p_value is not None: # –ï—Å–ª–∏ –Ω–µ bool, –Ω–æ –Ω–µ None, –±–µ—Ä–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    p_value_str = str(p_value)

                # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
                escaped_srid = escape_markdown_v2(str(srid))
                escaped_name_val = escape_markdown_v2(name_val)
                escaped_description_val = escape_markdown_v2(description_val)
                escaped_p_val = escape_markdown_v2(p_value_str) # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ p

                input_text_content = (
                    f"üî∑ *SRID:* `{escaped_srid}`\n"
                    f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* {escaped_name_val}\n"
                    f"‚ÑπÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {escaped_description_val}\n"
                    f"‚úÖ *–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å:* {escaped_p_val}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ p
                )
                
                # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
                # title - –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                # description - SRID –∏ —á–∞—Å—Ç—å –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É description –¥–ª—è –∏–Ω–ª–∞–π–Ω –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                inline_description_preview = f"SRID: {srid} ({description_val[:50]}{'...' if len(description_val) > 50 else ''})"

                articles.append(
                    InlineQueryResultArticle(
                        id=str(srid),
                        title=name_val, # –ö—Ä–∞—Ç–∫–æ–µ –∏–º—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        description=inline_description_preview, # SRID –∏ —á–∞—Å—Ç—å –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
                        input_message_content=InputTextMessageContent(
                            input_text_content,
                            parse_mode=ParseMode.MARKDOWN_V2
                        ),
                        reply_markup=self._get_export_keyboard_for_srid(str(srid)) # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    )
                )
            await update.inline_query.answer(articles, cache_time=300)
        except Exception as e:
            if self._logger:
                self._logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
            try:
                await update.inline_query.answer([], cache_time=5)
            except Exception as ex_answer: 
                 if self._logger:
                    self._logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å: {ex_answer}")

    def _filter_problematic_variants(self, original_query: str, variants: List[str]) -> List[str]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –¥–∞–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        Args:
            original_query: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            variants: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        """
        filtered_variants = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª–Ω—ã–º (—Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä –∑–æ–Ω—ã)
        original_lower = original_query.lower()
        has_zone_number = any(char.isdigit() and original_lower[i-1:i+1] in ['z1', '–∑1', 'z2', '–∑2', 'z3', '–∑3', 'z4', '–∑4', 'z5', '–∑5', 'z6', '–∑6', 'z7', '–∑7', 'z8', '–∑8', 'z9', '–∑9'] or
                             (char.isdigit() and i > 0 and original_lower[i-1] in ['z', '–∑']) 
                             for i, char in enumerate(original_lower))
        
        for variant in variants:
            variant_lower = variant.lower()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã GSK/MSK –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∑–æ–Ω—ã –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∞–ª –Ω–æ–º–µ—Ä
            if has_zone_number:
                # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                problematic_bases = ['gsk11', '–≥—Å–∫11', 'msk', '–º—Å–∫', 'sk42', '—Å–∫42', 'sk95', '—Å–∫95', 'sk63', '—Å–∫63']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –±–∞–∑–æ–≤—ã–º
                is_problematic = False
                for base in problematic_bases:
                    if variant_lower == base or variant.upper() == base.upper():
                        is_problematic = True
                        self._logger.debug(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –±–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: '{variant}'")
                        break
                
                if is_problematic:
                    continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            filtered_variants.append(variant)
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ
        if len(filtered_variants) < 5:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∞–º—ã—Ö –±–ª–∏–∑–∫–∏—Ö –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            remaining_variants = [v for v in variants if v not in filtered_variants]
            for variant in remaining_variants[:3]:  # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞
                filtered_variants.append(variant)
        
        return filtered_variants 

    async def start_search_by_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        self._logger.info(f"[SearchHandler.start_search_by_description] user_id={update.effective_user.id}")
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –°–ö:")
        return States.SEARCH_INPUT

    async def handle_filter_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Any:
        query = update.callback_query
        await query.answer()
        self._logger.info(f"[SearchHandler.handle_filter_callback] data={query.data}, user_id={update.effective_user.id}")
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä: {query.data}. –õ–æ–≥–∏–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
        return States.SEARCH_INPUT

    async def handle_filter_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"""
        if update.message and update.message.text:
            txt = update.message.text.strip()
            
            self._logger.info(f"[SearchHandler.handle_filter_input] text='{txt}', user_id={update.effective_user.id}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            try:
                await self._handle_update(update, context)
                # –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
                return States.SEARCH_INPUT
            except Exception as e:
                self._logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return States.SEARCH_INPUT
        
        return States.SEARCH_INPUT
        
    async def handle_pagination_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Any:
        query = update.callback_query
        await query.answer()
        self._logger.info(f"[SearchHandler.handle_pagination_callback] data={query.data}, user_id={update.effective_user.id}")
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è: {query.data}. –õ–æ–≥–∏–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
        return States.SEARCH_RESULTS

    async def handle_inline_result(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç '—ç—Ö–æ' –æ—Ç –≤—ã–±–æ—Ä–∞ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
        """
        user_id = update.effective_user.id
        self._logger.info(f"[SearchHandler.handle_inline_result] –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ '—ç—Ö–æ' –∏–Ω–ª–∞–π–Ω-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è user_id={user_id}.")
        # –ù–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–ª–æ—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    async def handle_inline_result_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "üî∑ SRID:").
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        """
        if update.message and update.message.text:
            user_id = update.effective_user.id
            text_preview = update.message.text[:50] + "..." if len(update.message.text) > 50 else update.message.text
            self._logger.info(f"[SearchHandler.handle_inline_result_message] –ò–≥–Ω–æ—Ä–∏—Ä—É—é inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è user_id={user_id}: {text_preview}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
        return States.SEARCH_INPUT

    async def handle_inline_export_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –æ—Ç –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫ inline-—Å–æ–æ–±—â–µ–Ω–∏—è–º.
        –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –≤ `CoordExportHandler`.
        """
        query = update.callback_query
        
        if query:
            await query.answer()

        try:
            if not query or not query.data:
                self._logger.warning("handle_inline_export_callback –ø–æ–ª—É—á–µ–Ω –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö.")
                return

            parts = query.data.split('_')
            if len(parts) < 5:
                self._logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –≤ inline —ç–∫—Å–ø–æ—Ä—Ç–µ: {query.data}")
                return

            _, _, export_type, format_name, srid = parts
            
            self._logger.info(f"[SearchHandler.handle_inline_export_callback] user_id={query.from_user.id}, type={export_type}, format={format_name}, srid={srid}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º callback_data –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π CoordExportHandler.
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ 'inline_export_prj_GMV25_100619' –≤ 'export_gmv25_100619'.
            # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: export_{format}_{srid}
            new_callback_data = f"export_{format_name.lower()}_{srid}"
            
            self._logger.info(f"–î–µ–ª–µ–≥–∏—Ä—É—é —ç–∫—Å–ø–æ—Ä—Ç –≤ CoordExportHandler —Å –Ω–æ–≤–æ–π callback_data: {new_callback_data}")

            if self.coord_export_handler:
                await self.coord_export_handler.handle_export_callback(update, context, custom_callback_data=new_callback_data)
            else:
                self._logger.error("coord_export_handler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ SearchHandler.")
                if query.message:
                    await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: —Å–µ—Ä–≤–∏—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")

        except Exception as e:
            self._logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_inline_export_callback: {e}", exc_info=True)
            if query and query.message:
                try:
                    await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞.")
                except Exception as edit_e:
                    self._logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {edit_e}")

    async def cancel_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
        """–û—Ç–º–µ–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        self._logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª –ø–æ–∏—Å–∫.")
        user_id = update.effective_user.id
        self._logger.info(f"[SearchHandler.cancel_search] user_id={user_id}")

        if self.menu_handler:
            await self.menu_handler.show_main_menu(update, context)
        
        return ConversationHandler.END

    def get_handler(self) -> ConversationHandler:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ConversationHandler –¥–ª—è –≤—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∏—Å–∫–∞."""
        
        back_button_text = MainKeyboard.BUTTON_MENU

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "üî∑ SRID:")
        inline_result_filter = filters.Regex(r'^üî∑ SRID:')
        
        handler = ConversationHandler(
            entry_points=[
                 CallbackQueryHandler(self.start_search_by_description, pattern='^search_desc$')
            ],
            states={
                States.SEARCH_INPUT: [
                    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
                    MessageHandler(filters.Text([back_button_text]), self.cancel_search),
                    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Ö)
                    MessageHandler(inline_result_filter, self.handle_inline_result_message),
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_filter_input),
                ],
                States.SEARCH_RESULTS: [
                    CallbackQueryHandler(self.handle_pagination_callback, pattern=r"^page_"),
                    CallbackQueryHandler(self.handle_filter_callback, pattern=r"^filter_"),
                    MessageHandler(filters.Text([back_button_text]), self.cancel_search)
                ]
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel_search),
                MessageHandler(filters.Text([back_button_text]), self.cancel_search)
            ],
            map_to_parent={ 
                ConversationHandler.END: States.MAIN_MENU,
            },
            per_user=True,
            per_chat=True,
        )
        return handler 