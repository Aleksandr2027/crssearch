"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤
"""

from typing import Optional, Dict
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from XML_search.enhanced.metrics_manager import MetricsManager
from XML_search.enhanced.log_manager import LogManager
from .base import BaseKeyboard, KeyboardResult

class ExportKeyboard(BaseKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ (–∫–∞–∫ –≤ ExportValidator)
    FORMATS = {
        'xml_Civil3D': {
            'label': 'xml_Civil3D',
            'requires_auth': False,
            'description': '–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç Civil 3D'
        },
        'prj_GMv20': {
            'label': 'prj_GMv20',
            'requires_auth': True,
            'description': '–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç GM v2.0'
        },
        'prj_GMv25': {
            'label': 'prj_GMv25',
            'requires_auth': True,
            'description': '–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç GM v2.5'
        }
    }
    
    def build(self, srid: int, user_id: Optional[int] = None) -> KeyboardResult:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
        
        Args:
            srid: SRID —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            
        Raises:
            ValueError: –ï—Å–ª–∏ SRID –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è SRID
            if not isinstance(srid, int) or srid <= 0:
                raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π SRID: {srid}")
            
            buttons = []
            row = []
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            for format_id, info in self.FORMATS.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                if not info['requires_auth'] or user_id is not None:
                    button = InlineKeyboardButton(
                        info['label'],
                        callback_data=f"export_{format_id}:{srid}"
                    )
                    row.append(button)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
                    if len(row) == 2:
                        buttons.append(row)
                        row = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            if row:
                buttons.append(row)
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            buttons.append([
                InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥",
                    callback_data="menu"
                )
            ])
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            for row in buttons:
                if not self._validate_buttons([row]):
                    raise ValueError("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫")
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self._track_build('export')
            
            return KeyboardResult(
                keyboard=InlineKeyboardMarkup(buttons),
                metadata={
                    'type': 'export',
                    'srid': srid,
                    'user_id': user_id,
                    'available_formats': [
                        format_id for format_id, info in self.FORMATS.items()
                        if not info['requires_auth'] or user_id is not None
                    ]
                }
            )
            
        except Exception as e:
            self._track_build('export', success=False)
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            raise 