"""
Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞
"""

from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict, Any

class InlineKeyboard:
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞"""
    
    def create_inline_keyboard(
        self,
        buttons: List[List[Dict[str, Any]]],
        row_width: int = 3
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ InlineKeyboardMarkup.

        Args:
            buttons: –°–ø–∏—Å–æ–∫ —Ä—è–¥–æ–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π —Ä—è–¥ - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –æ–ø–∏—Å—ã–≤–∞—é—â–∏—Ö –∫–Ω–æ–ø–∫–∏.
            row_width: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ buttons —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä—è–¥—ã).

        Returns:
            –û–±—ä–µ–∫—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
        """
        keyboard: List[List[InlineKeyboardButton]] = []
        for button_row_specs in buttons:  # Iterate over each list of button dicts (each list is a row)
            current_row_buttons: List[InlineKeyboardButton] = []
            for button_spec in button_row_specs:  # Iterate over each button dict in the current row
                current_row_buttons.append(
                    InlineKeyboardButton(
                        text=button_spec["text"],
                        callback_data=button_spec.get("callback_data"),
                        url=button_spec.get("url"),
                        switch_inline_query=button_spec.get("switch_inline_query"),
                        switch_inline_query_current_chat=button_spec.get("switch_inline_query_current_chat")
                    )
                )
            if current_row_buttons: # Add the constructed row of buttons to the keyboard
                keyboard.append(current_row_buttons)
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_search_keyboard(self) -> InlineKeyboardMarkup:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        
        Returns:
            –û–±—ä–µ–∫—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        buttons = [[{
            'text': 'üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ',
            'switch_inline_query_current_chat': ''
        }]]
        return self.create_inline_keyboard(buttons)
    
    def get_export_keyboard(self, srid: int) -> InlineKeyboardMarkup:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
        
        Args:
            srid: SRID —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            
        Returns:
            –û–±—ä–µ–∫—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        buttons = [[
            {
                'text': 'xml_Civil3D',
                'callback_data': f'export_xml:{srid}'
            },
            {
                'text': 'prj_GMv20',
                'callback_data': f'export_gmv20:{srid}'
            },
            {
                'text': 'prj_GMv25',
                'callback_data': f'export_gmv25:{srid}'
            }
        ]]
        return self.create_inline_keyboard(buttons)

# –ù–æ–≤–∞—è standalone —Ñ—É–Ω–∫—Ü–∏—è, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∑ –º–µ—Ç–æ–¥–∞ –∫–ª–∞—Å—Å–∞
def get_export_keyboard_for_srid(srid_str: str) -> InlineKeyboardMarkup:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ SRID.
    
    Args:
        srid_str: SRID —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
        
    Returns:
        –û–±—ä–µ–∫—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä InlineKeyboard 
    # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫, —á—Ç–æ –ø—Ä–æ—â–µ –∑–¥–µ—Å—å.
    
    # srid = int(srid_str) # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è callback_data, 
                         # –Ω–æ f-string —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å–æ —Å—Ç—Ä–æ–∫–æ–π.

    buttons_data = [[
        {
            'text': 'xml_Civil3D',
            'callback_data': f'export_xml:{srid_str}' # –ò—Å–ø–æ–ª—å–∑—É–µ–º srid_str –Ω–∞–ø—Ä—è–º—É—é
        },
        {
            'text': 'prj_GMv20',
            'callback_data': f'export_gmv20:{srid_str}'
        },
        {
            'text': 'prj_GMv25',
            'callback_data': f'export_gmv25:{srid_str}'
        }
    ]]
    
    # –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è InlineKeyboardMarkup –∏–∑ InlineKeyboard.create_inline_keyboard
    # –ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º –µ–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
    keyboard_buttons_row = []
    for button_def in buttons_data[0]: # –£ –Ω–∞—Å –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        keyboard_buttons_row.append(
            InlineKeyboardButton(
                text=button_def["text"],
                callback_data=button_def.get("callback_data"),
                url=button_def.get("url"), # –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
                switch_inline_query=button_def.get("switch_inline_query"),
                switch_inline_query_current_chat=button_def.get("switch_inline_query_current_chat")
            )
        )
            
    return InlineKeyboardMarkup([keyboard_buttons_row]) 