"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
"""

from typing import Optional, Dict, Any
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from .base import BaseKeyboard, KeyboardResult

class SearchKeyboard(BaseKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    FILTERS = {
        'type': {
            'label': 'üè∑ –¢–∏–ø –°–ö',
            'callback': 'filter_type',
            'description': '–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'
        },
        'region': {
            'label': 'üåç –†–µ–≥–∏–æ–Ω',
            'callback': 'filter_region',
            'description': '–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É'
        },
        'zone': {
            'label': 'üìç –ó–æ–Ω–∞',
            'callback': 'filter_zone',
            'description': '–§–∏–ª—å—Ç—Ä –ø–æ –∑–æ–Ω–µ'
        }
    }
    
    def build(self, filters: Optional[Dict[str, Any]] = None) -> KeyboardResult:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–∏—Å–∫–∞
        
        Args:
            filters: –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        try:
            buttons = [
                # –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                [InlineKeyboardButton(
                    "üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫",
                    switch_inline_query_current_chat=""
                )]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            for filter_id, info in self.FILTERS.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ñ–∏–ª—å—Ç—Ä
                is_active = filters and filters.get(filter_id)
                label = f"{info['label']} ‚úì" if is_active else info['label']
                
                buttons.append([
                    InlineKeyboardButton(
                        label,
                        callback_data=f"{info['callback']}"
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ
            if filters and any(filters.values()):
                buttons.append([
                    InlineKeyboardButton(
                        "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
                        callback_data="reset_filters"
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            buttons.append([
                InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥",
                    callback_data="menu"
                )
            ])
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            for row in buttons:
                if not self._validate_buttons([row]):
                    raise ValueError("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫")
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self._track_build('search')
            
            return KeyboardResult(
                keyboard=InlineKeyboardMarkup(buttons),
                metadata={
                    'type': 'search',
                    'filters': filters,
                    'active_filters': [
                        filter_id for filter_id, value in (filters or {}).items()
                        if value
                    ]
                }
            )
            
        except Exception as e:
            self._track_build('search', success=False)
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–∏—Å–∫–∞: {e}")
            raise 