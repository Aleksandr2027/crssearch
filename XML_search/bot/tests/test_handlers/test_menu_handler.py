"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
"""
import pytest
from unittest.mock import AsyncMock, patch, MagicMock, call
from telegram import Update, User, Message, Chat, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from XML_search.bot.handlers.menu_handler import MenuHandler
from XML_search.bot.states import States
from XML_search.enhanced.db_manager import DatabaseManager
from XML_search.enhanced.metrics_manager import MetricsManager

class TestMenuHandlerImpl(MenuHandler):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è MenuHandler"""
    async def _handle_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞"""
        return await super()._handle_update(update, context)

@pytest.fixture
def mock_db_manager():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞ DatabaseManager"""
    db_manager = MagicMock(spec=DatabaseManager)
    return db_manager

@pytest.fixture
def mock_metrics():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞ MetricsManager"""
    metrics = MagicMock(spec=MetricsManager)
    return metrics

@pytest.fixture
def mock_logger():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞ Logger"""
    logger = MagicMock()
    return logger

@pytest.fixture
def mock_cache():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞ Cache"""
    cache = MagicMock()
    return cache

@pytest.fixture
def menu_handler(mock_db_manager, mock_metrics, mock_logger, mock_cache):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—é"""
    return MenuHandler(
        db_manager=mock_db_manager,
        metrics=mock_metrics,
        logger=mock_logger,
        cache=mock_cache
    )

@pytest.fixture
def mock_update():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞ Update"""
    update = MagicMock(spec=Update)
    user = MagicMock(spec=User)
    user.id = 12345
    chat = MagicMock(spec=Chat)
    chat.id = 12345
    message = MagicMock(spec=Message)
    message.from_user = user
    message.chat = chat
    update.effective_user = user
    update.message = message
    update.effective_chat = chat
    return update

@pytest.fixture
def mock_context():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞ Context"""
    context = MagicMock(spec=ContextTypes.DEFAULT_TYPE)
    context.bot = AsyncMock()
    return context

class TestMenuHandler:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—é"""
    
    @pytest.mark.asyncio
    async def test_show_main_menu(self, menu_handler, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        mock_update.message.reply_text = AsyncMock()
        
        result = await menu_handler.show_main_menu(mock_update, mock_context)
        
        assert result == States.MAIN_MENU
        mock_update.message.reply_text.assert_called_once_with(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            reply_markup=pytest.approx(ReplyKeyboardMarkup([
                [menu_handler.BUTTON_COORD_SEARCH],
                [menu_handler.BUTTON_DESC_SEARCH]
            ], resize_keyboard=True))
        )
        menu_handler.metrics.increment.assert_called_with('main_menu_show')
        menu_handler.logger.info.assert_called()
        
    @pytest.mark.asyncio
    async def test_handle_coord_search(self, menu_handler, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        mock_update.message.text = menu_handler.BUTTON_COORD_SEARCH
        mock_update.message.reply_text = AsyncMock()
        
        result = await menu_handler._handle_update(mock_update, mock_context)
        
        assert result == States.WAITING_COORDINATES
        mock_update.message.reply_text.assert_called_once_with(
            "üìç –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'latitude;longitude' –∏–ª–∏ 'latitude$longitude' –∏–ª–∏ 'latitude%longitude'\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:\n"
            "1. –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –≥—Ä–∞–¥—É—Å—ã: 55.7558;37.6173 –∏–ª–∏ 55.7558$37.6173 –∏–ª–∏ 55.7558%37.6173\n"
            "2. –ì—Ä–∞–¥—É—Å—ã –∏ –º–∏–Ω—É—Ç—ã: 55 45.348;37 37.038 –∏–ª–∏ 55 45.348$37 37.038 –∏–ª–∏ 55 45.348%37 37.038\n"
            "3. –ì—Ä–∞–¥—É—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã: 55 45 20.88;37 37 2.28 –∏–ª–∏ 55 45 20.88$37 37 2.28 –∏–ª–∏ 55 45 20.88%37 37 2.28\n"
            "4. –° –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏: 55¬∞45'20.88\";37¬∞37'2.28\" –∏–ª–∏ 55¬∞45'20.88\"$37¬∞37'2.28\" –∏–ª–∏ 55¬∞45'20.88\"%37¬∞37'2.28\"\n\n"
            "–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —à–∏—Ä–æ—Ç–æ–π –∏ –¥–æ–ª–≥–æ—Ç–æ–π - —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;) –∏–ª–∏ –∑–Ω–∞–∫ –¥–æ–ª–ª–∞—Ä–∞ ($) –∏–ª–∏ –∑–Ω–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (%)",
            reply_markup=pytest.approx(ReplyKeyboardMarkup([[menu_handler.BUTTON_MENU]], resize_keyboard=True))
        )
        menu_handler.metrics.increment.assert_called_with('coord_search_selected')
        menu_handler.logger.info.assert_called()
        
    @pytest.mark.asyncio
    async def test_handle_desc_search(self, menu_handler, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"""
        mock_update.message.text = menu_handler.BUTTON_DESC_SEARCH
        mock_update.message.reply_text = AsyncMock()
        
        result = await menu_handler._handle_update(mock_update, mock_context)
        
        assert result == States.WAITING_SEARCH
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ reply_text —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        assert mock_update.message.reply_text.call_args_list[0] == call(
            "üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º:\n\n"
            "1. –ü–æ–∏—Å–∫ –ø–æ SRID:\n"
            "   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç\n"
            "   - –ü—Ä–∏–º–µ—Ä: 100000\n\n"
            "2. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:\n"
            "   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è\n"
            "   - –ü—Ä–∏–º–µ—Ä: MSK01z1\n\n"
            "3. –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n"
            "   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è\n"
            "   - –ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, Moskovskaya\n\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:\n"
            "- –°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è\n"
            "- –ó–∞—Ç–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è",
            reply_markup=pytest.approx(ReplyKeyboardMarkup([[menu_handler.BUTTON_MENU]], resize_keyboard=True))
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ reply_text —Å inline –∫–Ω–æ–ø–∫–æ–π
        inline_button = InlineKeyboardButton(
            text="üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ",
            switch_inline_query_current_chat=""
        )
        expected_markup = InlineKeyboardMarkup([[inline_button]])
        
        assert mock_update.message.reply_text.call_args_list[1] == call(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:",
            reply_markup=pytest.approx(expected_markup)
        )
        
        menu_handler.metrics.increment.assert_called_with('desc_search_selected')
        menu_handler.logger.info.assert_called()
        
    @pytest.mark.asyncio
    async def test_handle_menu_return(self, menu_handler, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        mock_update.message.text = menu_handler.BUTTON_MENU
        mock_update.message.reply_text = AsyncMock()
        
        result = await menu_handler._handle_update(mock_update, mock_context)
        
        assert result == States.MAIN_MENU
        mock_update.message.reply_text.assert_called_once_with(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            reply_markup=pytest.approx(ReplyKeyboardMarkup([
                [menu_handler.BUTTON_COORD_SEARCH],
                [menu_handler.BUTTON_DESC_SEARCH]
            ], resize_keyboard=True))
        )
        menu_handler.metrics.increment.assert_called_with('menu_return')
        menu_handler.logger.info.assert_called()
        
    @pytest.mark.asyncio
    async def test_handle_invalid_message(self, menu_handler, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        mock_update.message = None
        
        result = await menu_handler._handle_update(mock_update, mock_context)
        
        assert result == States.MAIN_MENU
        menu_handler.metrics.increment.assert_called_with('invalid_message')
        
    @pytest.mark.asyncio
    async def test_handle_invalid_text(self, menu_handler, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        mock_update.message.text = "invalid_command"
        
        result = await menu_handler._handle_update(mock_update, mock_context)
        
        assert result == States.MAIN_MENU
        menu_handler.metrics.increment.assert_called_with('invalid_command') 