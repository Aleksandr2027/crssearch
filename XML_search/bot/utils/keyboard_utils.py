"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –±–æ—Ç–∞
"""

from typing import List, Dict, Any, Optional, Union
from telegram import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from XML_search.enhanced.metrics_manager import MetricsManager
from XML_search.enhanced.log_manager import LogManager
from XML_search.enhanced.cache_manager import CacheManager
from XML_search.bot.keyboards.main_keyboard import (
    MainKeyboard,
    BUTTON_COORD_SEARCH,
    BUTTON_DESC_SEARCH,
    BUTTON_EXPORT_CIVIL3D,
    BUTTON_EXPORT_GMV20,
    BUTTON_EXPORT_GMV25
)

class KeyboardManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        self.metrics = MetricsManager()
        self.logger = LogManager().get_logger(__name__)
        self.cache = CacheManager()
        
        # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–æ—Ä–º–∞—Ç–∞–º —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.export_access = {
            'xml_Civil3D': lambda user_id: True,  # –î–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º
            'prj_GMv20': self._check_gmv_access,  # –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            'prj_GMv25': self._check_gmv_access   # –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        }
        
    def get_export_keyboard(self, srid: int, user_id: Optional[int] = None) -> InlineKeyboardMarkup:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        
        Args:
            srid: SRID —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
            
        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"export_keyboard_{srid}_{user_id}"
            cached_keyboard = self.cache.get(cache_key)
            if cached_keyboard:
                self.metrics.increment('keyboard_cache_hits')
                return cached_keyboard
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            buttons = []
            for format_type, access_check in self.export_access.items():
                if user_id is None or access_check(user_id):
                    buttons.append(
                        InlineKeyboardButton(
                            format_type,
                            callback_data=f"export_{format_type}:{srid}"
                        )
                    )
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
            keyboard = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
            markup = InlineKeyboardMarkup(keyboard)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.cache.set(cache_key, markup)
            self.metrics.increment('keyboard_cache_sets')
            
            return markup
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            self.metrics.increment('keyboard_errors')
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return InlineKeyboardMarkup([[]])
            
    def get_search_keyboard(self, filters: Optional[Dict[str, Any]] = None) -> InlineKeyboardMarkup:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
        
        Args:
            filters: –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            
        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∏—Å–∫–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"search_keyboard_{hash(str(filters))}"
            cached_keyboard = self.cache.get(cache_key)
            if cached_keyboard:
                self.metrics.increment('keyboard_cache_hits')
                return cached_keyboard
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            buttons = []
            if filters:
                for filter_name, filter_value in filters.items():
                    buttons.append([
                        InlineKeyboardButton(
                            f"{'‚úÖ' if filter_value else '‚ùå'} {filter_name}",
                            callback_data=f"filter_{filter_name}"
                        )
                    ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            buttons.append([
                InlineKeyboardButton(
                    "üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫",
                    switch_inline_query_current_chat=""
                )
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if filters:
                buttons.append([
                    InlineKeyboardButton(
                        "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
                        callback_data="reset_filters"
                    )
                ])
            
            markup = InlineKeyboardMarkup(buttons)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.cache.set(cache_key, markup)
            self.metrics.increment('keyboard_cache_sets')
            
            return markup
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–∏—Å–∫–∞: {e}")
            self.metrics.increment('keyboard_errors')
            return InlineKeyboardMarkup([[]])
            
    def get_pagination_keyboard(
        self,
        total_items: int,
        current_page: int,
        items_per_page: int = 10
    ) -> InlineKeyboardMarkup:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        
        Args:
            total_items: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            items_per_page: –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            
        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"pagination_keyboard_{total_items}_{current_page}_{items_per_page}"
            cached_keyboard = self.cache.get(cache_key)
            if cached_keyboard:
                self.metrics.increment('keyboard_cache_hits')
                return cached_keyboard
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            total_pages = (total_items + items_per_page - 1) // items_per_page
            buttons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []
            if current_page > 1:
                nav_buttons.append(
                    InlineKeyboardButton(
                        "‚¨ÖÔ∏è",
                        callback_data=f"page:{current_page-1}"
                    )
                )
            
            nav_buttons.append(
                InlineKeyboardButton(
                    f"{current_page}/{total_pages}",
                    callback_data="current_page"
                )
            )
            
            if current_page < total_pages:
                nav_buttons.append(
                    InlineKeyboardButton(
                        "‚û°Ô∏è",
                        callback_data=f"page:{current_page+1}"
                    )
                )
            
            buttons.append(nav_buttons)
            
            markup = InlineKeyboardMarkup(buttons)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.cache.set(cache_key, markup)
            self.metrics.increment('keyboard_cache_sets')
            
            return markup
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
            self.metrics.increment('keyboard_errors')
            return InlineKeyboardMarkup([[]])
            
    def validate_export_access(self, format_type: str, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É —ç–∫—Å–ø–æ—Ä—Ç–∞
        
        Args:
            format_type: –¢–∏–ø —Ñ–æ—Ä–º–∞—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            access_check = self.export_access.get(format_type)
            if access_check:
                return access_check(user_id)
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")
            self.metrics.increment('access_check_errors')
            return False
            
    def _check_gmv_access(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–æ—Ä–º–∞—Ç–∞–º GMv
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, False –∏–Ω–∞—á–µ
        """
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ GMv —Ñ–æ—Ä–º–∞—Ç–∞–º
        return True  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º 

def create_main_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞
    
    Returns:
        ReplyKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = [
        [KeyboardButton(BUTTON_COORD_SEARCH)],
        [KeyboardButton(BUTTON_DESC_SEARCH)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_search_keyboard(menu_button_text: str = MainKeyboard.BUTTON_MENU) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–∏—Å–∫–∞
    
    Args:
        menu_button_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        
    Returns:
        ReplyKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = [[KeyboardButton(menu_button_text)]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_export_keyboard(srid: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
    
    Args:
        srid: SRID —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    buttons = [
        InlineKeyboardButton(
            "xml_Civil3D",
            callback_data=f"export_xml:{srid}"
        ),
        InlineKeyboardButton(
            "prj_GMv20",
            callback_data=f"export_gmv20:{srid}"
        ),
        InlineKeyboardButton(
            "prj_GMv25",
            callback_data=f"export_gmv25:{srid}"
        )
    ]
    return InlineKeyboardMarkup([buttons])

def create_inline_search_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    button = InlineKeyboardButton(
        "üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ",
        switch_inline_query_current_chat=""
    )
    return InlineKeyboardMarkup([[button]]) 