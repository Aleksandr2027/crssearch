"""
–¢–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
"""

import unittest
from unittest.mock import Mock, AsyncMock, patch
from XML_search.bot.handlers.coord_handler import CoordHandler, CoordinateInput
from XML_search.bot.config import BotConfig

class TestCoordHandlerCompact(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = Mock(spec=BotConfig)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è db_manager
        self.db_manager = Mock()
        self.db_manager.connection = AsyncMock()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.coord_handler = CoordHandler(
            config=self.config,
            db_manager=self.db_manager,
            metrics=Mock(),
            logger=Mock(),
            cache=Mock()
        )
    
    def test_parse_coordinates_decimal(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        # –¢–µ—Å—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º $
        coords = self.coord_handler._parse_coordinates("55.7558$37.6173")
        self.assertIsNotNone(coords)
        self.assertEqual(coords.latitude, 55.7558)
        self.assertEqual(coords.longitude, 37.6173)
        
        # –¢–µ—Å—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ;
        coords = self.coord_handler._parse_coordinates("55.7558;37.6173")
        self.assertIsNotNone(coords)
        self.assertEqual(coords.latitude, 55.7558)
        self.assertEqual(coords.longitude, 37.6173)
        
        # –¢–µ—Å—Ç —Å –ø—Ä–æ–±–µ–ª–æ–º
        coords = self.coord_handler._parse_coordinates("55.7558 37.6173")
        self.assertIsNotNone(coords)
        self.assertEqual(coords.latitude, 55.7558)
        self.assertEqual(coords.longitude, 37.6173)
    
    def test_parse_coordinates_dms(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥—Ä–∞–¥—É—Å—ã-–º–∏–Ω—É—Ç—ã-—Å–µ–∫—É–Ω–¥—ã"""
        coords = self.coord_handler._parse_coordinates("55 45 20.88;37 37 2.28")
        self.assertIsNotNone(coords)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –≥—Ä–∞–¥—É—Å—ã
        expected_lat = 55 + 45/60 + 20.88/3600
        expected_lon = 37 + 37/60 + 2.28/3600
        
        self.assertAlmostEqual(coords.latitude, expected_lat, places=6)
        self.assertAlmostEqual(coords.longitude, expected_lon, places=6)
    
    def test_parse_coordinates_invalid(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        coords = self.coord_handler._parse_coordinates("")
        self.assertIsNone(coords)
        
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        coords = self.coord_handler._parse_coordinates("invalid coordinates")
        self.assertIsNone(coords)
        
        # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
        coords = self.coord_handler._parse_coordinates("55.7558")
        self.assertIsNone(coords)
    
    def test_create_compact_list(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        coords = CoordinateInput(latitude=55.7558, longitude=37.6173)
        results = [
            (32637, "UTM zone 37N", "37N", "Universal Transverse Mercator zone 37 N", None, 414668.12, 6176909.34),
            (100326, "SK95z7", "7", "–°–ö-95 –∑–æ–Ω–∞ 7", None, 414668.12, 6176909.34),
            (100327, "SK63z7", "7", "–°–ö-63 –∑–æ–Ω–∞ 7", None, 414668.12, 6176909.34)
        ]
        
        text = self.coord_handler._create_compact_list(coords, results)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        self.assertIn("–ù–∞–π–¥–µ–Ω–æ 3 —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", text)
        self.assertIn("Lat: 55.7558", text)
        self.assertIn("Lon: 37.6173", text)
        self.assertIn("1. UTM zone 37N", text)
        self.assertIn("2. SK95z7", text)
        self.assertIn("3. SK63z7", text)
    
    def test_create_detailed_view(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –≤–∏–¥–∞"""
        coords = CoordinateInput(latitude=55.7558, longitude=37.6173)
        results = [
            (32637, "UTM zone 37N", "37N", "Universal Transverse Mercator zone 37 N", None, 414668.12, 6176909.34),
            (100326, "SK95z7", "7", "–°–ö-95 –∑–æ–Ω–∞ 7", None, 414668.12, 6176909.34)
        ]
        selected_srid = 32637
        
        text = self.coord_handler._create_detailed_view(coords, results, selected_srid)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞
        self.assertIn("üî∑ 1. UTM zone 37N", text)
        self.assertIn("SRID: 32637", text)
        self.assertIn("–ó–æ–Ω–∞: 37N", text)
        self.assertIn("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: X=414668.12, Y=6176909.34", text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—Ä—É–≥–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞
        self.assertIn("2. SK95z7", text)
        self.assertNotIn("SRID: 100326", text)
    
    def test_get_compact_keyboard(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        results = [
            (32637, "UTM zone 37N", "37N", "Universal Transverse Mercator zone 37 N", None, 414668.12, 6176909.34),
            (100326, "SK95z7", "7", "–°–ö-95 –∑–æ–Ω–∞ 7", None, 414668.12, 6176909.34)
        ]
        
        keyboard = self.coord_handler._get_compact_keyboard(results)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.assertEqual(len(keyboard.inline_keyboard), 3)  # 2 –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" + 1 –∫–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data
        self.assertEqual(keyboard.inline_keyboard[0][0].callback_data, "coord_detail:32637")
        self.assertEqual(keyboard.inline_keyboard[1][0].callback_data, "coord_detail:100326")
        self.assertEqual(keyboard.inline_keyboard[2][0].callback_data, "coord_back_to_menu")
    
    def test_get_detailed_keyboard(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        results = [
            (32637, "UTM zone 37N", "37N", "Universal Transverse Mercator zone 37 N", None, 414668.12, 6176909.34),
            (100326, "SK95z7", "7", "–°–ö-95 –∑–æ–Ω–∞ 7", None, 414668.12, 6176909.34)
        ]
        selected_srid = 32637
        
        keyboard = self.coord_handler._get_detailed_keyboard(selected_srid, results)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_row = keyboard.inline_keyboard[0]
        self.assertEqual(len(export_row), 3)  # Civil3D, GMv20, GMv25
        self.assertEqual(export_row[0].callback_data, "coord_export:civil3d:32637")
        self.assertEqual(export_row[1].callback_data, "coord_export:gmv20:32637")
        self.assertEqual(export_row[2].callback_data, "coord_export:gmv25:32637")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –¥–ª—è –¥—Ä—É–≥–æ–π —Å–∏—Å—Ç–µ–º—ã
        detail_button = keyboard.inline_keyboard[1][0]
        self.assertEqual(detail_button.callback_data, "coord_detail:100326")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ "–°–≤–µ—Ä–Ω—É—Ç—å" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        bottom_row = keyboard.inline_keyboard[2]
        self.assertEqual(bottom_row[0].callback_data, "coord_collapse")
        self.assertEqual(bottom_row[1].callback_data, "coord_back_to_menu")

if __name__ == '__main__':
    unittest.main() 